import{a as o,t as l}from"./disclose-version.BFhNmyvO.js";import"./legacy.Hbd-2b9r.js";import{s as t,w as p}from"./runtime.6XPVmw07.js";import{h as e}from"./html.A3LTe6ay.js";const y={layout:"post",title:"Debugging tricks",date:"2021-03-19T00:00:00.000Z"};var r=l('<p>I’m working through understanding some complicated code (<a href="https://github.com/fishtown-analytics/dbt" rel="nofollow">https://github.com/fishtown-analytics/dbt</a>) and it has a ton of indirection, and sometimes I can’t tell what code calls what! Here are some neat tricks for making progress:</p> <h2>Pip install your own version</h2> <p>I git cloned the repo and <code>pip install -e path/to/my/version</code> into the same virtual env where I’d otherwise run the production version. Now I can patch it, run the install command again, and run my version with other code.</p> <h2>Get the call stack</h2> <p>In conjunction with the above, if I want to know how a function gets called, I can print the call stack from within the function:</p> <!>',1);function D(n){var s=r(),a=t(p(s),10);e(a,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#81A1C1">def</span><span style="color:#88C0D0"> complicated_indirection</span><span style="color:#ECEFF4">():</span></span>
<span class="line"><span style="color:#D8DEE9FF">    ...</span></span>
<span class="line"><span style="color:#81A1C1">    import</span><span style="color:#D8DEE9FF"> inspect</span></span>
<span class="line"><span style="color:#D8DEE9FF">    curframe </span><span style="color:#81A1C1">=</span><span style="color:#D8DEE9FF"> inspect</span><span style="color:#ECEFF4">.</span><span style="color:#88C0D0">currentframe</span><span style="color:#ECEFF4">()</span></span>
<span class="line"><span style="color:#D8DEE9FF">    calframe </span><span style="color:#81A1C1">=</span><span style="color:#D8DEE9FF"> inspect</span><span style="color:#ECEFF4">.</span><span style="color:#88C0D0">getouterframes</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9FF">curframe</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 2</span><span style="color:#ECEFF4">)</span></span>
<span class="line"><span style="color:#81A1C1">    for</span><span style="color:#D8DEE9FF"> f </span><span style="color:#81A1C1">in</span><span style="color:#D8DEE9FF"> calframe</span><span style="color:#ECEFF4">:</span></span>
<span class="line"><span style="color:#88C0D0">        print</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9FF">f</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9FF">filename</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9FF"> f</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9FF">lineno</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9FF"> f</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9FF">function</span><span style="color:#ECEFF4">)</span></span>
<span class="line"><span style="color:#D8DEE9FF">    ...</span></span></code></pre>`),o(n,s)}export{D as default,y as metadata};
