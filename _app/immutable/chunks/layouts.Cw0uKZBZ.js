var $=t=>{throw TypeError(t)};var G=(t,s,o)=>s.has(t)||$("Cannot "+o);var p=(t,s,o)=>(G(t,s,"read from private field"),o?o.call(t):s.get(t)),E=(t,s,o)=>s.has(t)?$("Cannot add the same private member more than once"):s instanceof WeakSet?s.add(t):s.set(t,o),L=(t,s,o,l)=>(G(t,s,"write to private field"),l?l.call(t,o):s.set(t,o),o);import{a as M,t as ss,n as os}from"./disclose-version.BNO5E3CA.js";import{a8 as H,j as ns,J as w,g as f,p as ls,s as T,w as rs,t as O,e as ps,av as W,f as j,r as z,o as is}from"./runtime.CUXqFQnj.js";import{d as cs,s as K}from"./render.BtvPVHjT.js";import{i as ys}from"./if.CpqPPbvx.js";import{e as hs,i as ds}from"./each.Cow71Dm7.js";import{h as Q}from"./html.CIg2DK7T.js";import{s as V}from"./attributes.B3mHJc4L.js";import{p as m}from"./proxy.DencPW26.js";import{r as Es,l as fs}from"./loop.BGGTUj09.js";import{i as P}from"./utils.vK_o3JBb.js";function us(t){return t}function J(t,s){if(t===s||t!==t)return()=>t;const o=typeof t;if(o!==typeof s||Array.isArray(t)!==Array.isArray(s))throw new Error("Cannot interpolate values of different type");if(Array.isArray(t)){const l=s.map((i,r)=>J(t[r],i));return i=>l.map(r=>r(i))}if(o==="object"){if(!t||!s)throw new Error("Object cannot be null");if(P(t)&&P(s)){const r=t.getTime(),h=s.getTime()-r;return C=>new Date(r+C*h)}const l=Object.keys(s),i={};return l.forEach(r=>{i[r]=J(t[r],s[r])}),r=>{const F={};return l.forEach(h=>{F[h]=i[h](r)}),F}}if(o==="number"){const l=s-t;return i=>t+i*l}throw new Error(`Cannot interpolate ${o} values`)}var u,D,S,x;const X=class X{constructor(s,o={}){E(this,u,H(void 0));E(this,D,H(void 0));E(this,S);E(this,x,null);p(this,u).v=p(this,D).v=s,L(this,S,o)}static of(s,o){const l=new X(s(),o);return ns(()=>{l.set(s())}),l}set(s,o){w(p(this,D),s);let l=p(this,u).v,i=p(this,x),r=!1,{delay:F=0,duration:h=400,easing:C=us,interpolate:g=J}={...p(this,S),...o};const c=Es.now()+F;let v;return L(this,x,fs(A=>{if(A<c)return!0;r||(r=!0,v=g(l,s),typeof h=="function"&&(h=h(l,s)),i==null||i.abort());const k=A-c;return k>h?(w(p(this,u),s),!1):(w(p(this,u),v(C(k/h))),!0)})),p(this,x).promise}get current(){return f(p(this,u))}get target(){return f(p(this,D))}set target(s){this.set(s)}};u=new WeakMap,D=new WeakMap,S=new WeakMap,x=new WeakMap;let N=X;const zs={title:"Layouts",summary:"Some of the coolest algorithms you use everyday without knowing it",date:"2025-03-28T00:00:00.000Z"};var Fs=os("<text> </text>"),Cs=ss('<button class="px-2 py-1 text-white rounded bg-yellow-500">click here</button>'),gs=ss('<p>A layout algorithm is a structured approach to rendering information: specifically it solves the problem of <em>where do things go</em>.</p> <p>You’re looking at a web page right now organized by layout algorithms that implement the <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Box_model" rel="nofollow">CSS Box Model</a>. This page benefits from layout tree construction, box size calculation, flow layout algorithms and positioning algorithms.</p> <p>I find layout algorithms really interesting. They drive so much of how we interact with the digital world, and when they work well they seem amost magical.</p> <p>So I thought today I’d take a look at a class of layout algorithms called <em>hierarchical</em> layout algorithms. These represent information that can be encoded in a graph, like a tree or diagram.</p> <p>The problem is, given a set of nodes and edges:</p> <!> <p>How do we generate something like this?</p> <svg class="w-1/2 mx-auto" viewBox="30 0 250 80"><defs><marker id="arrowhead" markerWidth="6" markerHeight="7" refX="4" refY="3.5" orient="auto"><polygon points="0 0, 6 3.5, 0 7"></polygon></marker></defs><text x="50" y="50" font-size="20">🐄</text><text x="150" y="50" font-size="20">🥛</text><text x="250" y="20" font-size="20">🧀</text><text x="250" y="80" font-size="20">🧈</text><line x1="85" y1="45" x2="135" y2="45" style="stroke:rgb(0,0,0);stroke-width:2" marker-end="url(#arrowhead)"></line><line x1="185" y1="45" x2="235" y2="25" style="stroke:rgb(0,0,0);stroke-width:2" marker-end="url(#arrowhead)"></line><line x1="185" y1="45" x2="235" y2="65" style="stroke:rgb(0,0,0);stroke-width:2" marker-end="url(#arrowhead)"></line></svg> <p>Drawing the diagram is easy enough in javascript if you know the coordinates— but how do you know the right coordinates?</p> <p>The industry standard is something called <a href="https://en.wikipedia.org/wiki/Layered_graph_drawing" rel="nofollow">Sugiyama</a>, but implementing it can be thousands of lines of code— see the Javascript implementation, <a href="https://github.com/dagrejs/dagre" rel="nofollow">Dagre</a>, for more on that.</p> <p>Because of space and brain constraints, we’ll look at a common simpler option: the <a href="https://reingold.co/tidier-drawings.pdf" rel="nofollow">Reingold-Tilford algorithm</a>.</p> <h2>Reingold-Tilford</h2> <p>Reingold-Tilford requires us to do four passes over the data:</p> <ol><li>Assign initial coordinates</li> <li>Resolve conflicts between subtrees</li> <li>Apply modifiers to the final coordinates</li> <li>Normalize coordinates</li></ol> <p>Before we do the first step we need to construct a Tree structure:</p> <!> <p>Then assigning initial coordinates is as simple as walking through the tree recursively and</p> <ol><li>Calculate the depth of each node</li> <li>Calculate a position that is in the center of its children</li></ol> <p>Let’s walk through the steps.</p> <span class="bg-gray-200"></span> <div class="flex gap-6"><svg class="h-48 flex-grow" viewBox="0 -50 100 150"></svg> <div class="w-1/3"><p class="text-yellow-400"> </p> <!></div></div> <p>and that’s pretty much sufficient for a really simple tree like this one!</p> <p>In another post we’ll go over the other steps: resolving conflicts with modifiers and normalizing coordinates.</p>',1);function Ss(t,s){var b,_,B;ls(s,!0);class o{constructor(e){E(this,b,W(m(new N(0))));E(this,_,W(m(new N(0))));E(this,B,W(0));this.value=e,this.children=[]}get x(){return f(p(this,b))}set x(e){w(p(this,b),m(e))}get y(){return f(p(this,_))}set y(e){w(p(this,_),m(e))}get mod(){return f(p(this,B))}set mod(e){w(p(this,B),m(e))}addChild(e){return this.children.push(e),e}}b=new WeakMap,_=new WeakMap,B=new WeakMap;const l=(a,e=0,n=30)=>{a.y.target=e*n,a.children.forEach(y=>{l(y,e+1,n)})},i=(a,e,n)=>{a.x.target=e,e+=n,a.children.forEach((y,d)=>{i(y,e*(d+1),n)})},r=a=>{a.children.forEach(y=>{r(y)});const e=a.children[0],n=a.children[a.children.length-1];e&&(a.x.target=(e.x.target+n.x.target)/2)},F={nodes:["🐄","🥛","🧀","🧈"],edges:[{in:"🐄",out:"🥛"},{in:"🥛",out:"🧀"},{in:"🥛",out:"🧈"}]};function h(a){const e=new Map;a.nodes.forEach(d=>{e.set(d,new o(d))});const n=new Set;a.edges.forEach(d=>{const U=e.get(d.in),Z=e.get(d.out);U&&Z&&(U.addChild(Z),n.add(d.out))});let y=null;for(const d of a.nodes)if(!n.has(d)){y=e.get(d);break}return y}function C(a){let e=[a];for(const n of a.children)for(const y of C(n))e.push(y);return e}const g=h(F);let c=m({current:0,finished:!1,text:"We start with our nodes all piled up on top of each other. The first step is to calculate *depth*.",steps:{0:()=>{l(g),c.current++,c.text="We start with the root node and walk the tree, adding a bit of height for each node."},1:()=>{i(g,0,20),c.current++,c.text="Then we walk the tree to space out the nodes in a naive way."},2:()=>{r(g),c.current++,c.text="Then we go back and put each node in the middle of its children.",c.finished=!0}}});var v=gs(),A=T(rs(v),10);Q(A,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#ECEFF4">&#123;</span></span>
<span class="line"><span style="color:#D8DEE9FF">    nodes</span><span style="color:#ECEFF4">:</span><span style="color:#D8DEE9FF"> [</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">🐄</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧀</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧈</span><span style="color:#ECEFF4">"</span><span style="color:#D8DEE9FF">]</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9FF">    edges</span><span style="color:#ECEFF4">:</span><span style="color:#D8DEE9FF"> [</span></span>
<span class="line"><span style="color:#ECEFF4">        &#123;</span><span style="color:#88C0D0">in</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🐄</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#88C0D0"> out</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">&#125;,</span></span>
<span class="line"><span style="color:#ECEFF4">        &#123;</span><span style="color:#88C0D0">in</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#88C0D0"> out</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧀</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">&#125;,</span></span>
<span class="line"><span style="color:#ECEFF4">        &#123;</span><span style="color:#88C0D0">in</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#88C0D0"> out</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧈</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">&#125;,</span></span>
<span class="line"><span style="color:#D8DEE9FF">    ]</span></span>
<span class="line"><span style="color:#ECEFF4">&#125;</span></span></code></pre>`);var k=T(A,20);Q(k,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">class</span><span style="color:#8FBCBB"> TreeNode</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">        constructor</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">value</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">value</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> value</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">children</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9FF"> []</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">x</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span><span style="color:#616E88">  // x-coordinate for drawing</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">y</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span><span style="color:#616E88">  // y-coordinate for drawing</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">mod</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span><span style="color:#616E88"> // modifier for shifting subtrees</span></span>
<span class="line"><span style="color:#ECEFF4">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0">        addChild</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">child</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">children</span><span style="color:#ECEFF4">.</span><span style="color:#88C0D0">push</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">child</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">            return</span><span style="color:#D8DEE9"> child</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">        &#125;</span></span>
<span class="line"><span style="color:#ECEFF4">    &#125;</span></span></code></pre>`);var Y=T(k,10),I=j(Y);hs(I,21,()=>C(g),ds,(a,e)=>{var n=Fs(),y=j(n,!0);z(n),O(()=>{V(n,"x",f(e).x.current),V(n,"y",f(e).y.current),K(y,f(e).value)}),M(a,n)}),z(I);var q=T(I,2),R=j(q),es=j(R,!0);z(R);var ts=T(R,2);{var as=a=>{var e=Cs();e.__click=function(...n){var y;(y=c.steps[c.current])==null||y.apply(this,n)},O(()=>e.disabled=c.finished),M(a,e)};ys(ts,a=>{c.finished||a(as)})}z(q),z(Y),is(4),O(()=>K(es,c.text)),M(t,v),ps()}cs(["click"]);export{Ss as default,zs as metadata};
