var V=t=>{throw TypeError(t)};var P=(t,e,n)=>e.has(t)||V("Cannot "+n);var y=(t,e,n)=>(P(t,e,"read from private field"),n?n.call(t):e.get(t)),g=(t,e,n)=>e.has(t)?V("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,n),X=(t,e,n,p)=>(P(t,e,"write to private field"),p?p.call(t,n):e.set(t,n),n);import{a as L,t as cs,n as q}from"./disclose-version.BNO5E3CA.js";import{a8 as ss,j as ys,J as x,g as l,p as hs,av as R,s as w,w as es,t as Y,e as ds,f as z,r as S,o as Es}from"./runtime.CUXqFQnj.js";import{d as us,s as ts}from"./render.BtvPVHjT.js";import{i as fs}from"./if.CpqPPbvx.js";import{e as os,i as as}from"./each.Cow71Dm7.js";import{h as ns}from"./html.CIg2DK7T.js";import{s as D}from"./attributes.B3mHJc4L.js";import{p as m}from"./proxy.DencPW26.js";import{r as Fs,l as gs}from"./loop.BGGTUj09.js";import{i as rs}from"./utils.vK_o3JBb.js";function ms(t){return t}function J(t,e){if(t===e||t!==t)return()=>t;const n=typeof t;if(n!==typeof e||Array.isArray(t)!==Array.isArray(e))throw new Error("Cannot interpolate values of different type");if(Array.isArray(t)){const p=e.map((d,i)=>J(t[i],d));return d=>p.map(i=>i(d))}if(n==="object"){if(!t||!e)throw new Error("Object cannot be null");if(rs(t)&&rs(e)){const i=t.getTime(),E=e.getTime()-i;return v=>new Date(i+v*E)}const p=Object.keys(e),d={};return p.forEach(i=>{d[i]=J(t[i],e[i])}),i=>{const f={};return p.forEach(E=>{f[E]=d[E](i)}),f}}if(n==="number"){const p=e-t;return d=>t+d*p}throw new Error(`Cannot interpolate ${n} values`)}var C,k,I,A;const H=class H{constructor(e,n={}){g(this,C,ss(void 0));g(this,k,ss(void 0));g(this,I);g(this,A,null);y(this,C).v=y(this,k).v=e,X(this,I,n)}static of(e,n){const p=new H(e(),n);return ys(()=>{p.set(e())}),p}set(e,n){x(y(this,k),e);let p=y(this,C).v,d=y(this,A),i=!1,{delay:f=0,duration:E=400,easing:v=ms,interpolate:N=J}={...y(this,I),...n};const u=Fs.now()+f;let r;return X(this,A,gs(b=>{if(b<u)return!0;i||(i=!0,r=N(p,e),typeof E=="function"&&(E=E(p,e)),d==null||d.abort());const _=b-u;return _>E?(x(y(this,C),e),!1):(x(y(this,C),r(v(_/E))),!0)})),y(this,A).promise}get current(){return l(y(this,C))}get target(){return l(y(this,k))}set target(e){this.set(e)}};C=new WeakMap,k=new WeakMap,I=new WeakMap,A=new WeakMap;let W=H;const Ns={title:"Layouts",summary:"Some of the coolest algorithms you use everyday without knowing it",date:"2025-03-28T00:00:00.000Z"};var Cs=q("<text> </text>"),ws=q('<line stroke="black" stroke-width=".75" marker-end="url(#arrowhead2)"></line>'),xs=q('<defs><marker id="arrowhead2" markerWidth="4" markerHeight="5" refX="3" refY="2.5" orient="auto"><polygon points="0 0, 4 2.5, 0 5"></polygon></marker></defs><!>',1),vs=cs('<p>A layout algorithm is a structured approach to rendering information: specifically it solves the problem of <em>where do things go</em>.</p> <p>You’re looking at a web page right now organized by layout algorithms that implement the <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Box_model" rel="nofollow">CSS Box Model</a>. This page benefits from layout tree construction, box size calculation, flow layout algorithms and positioning algorithms.</p> <p>I find layout algorithms really interesting. They drive so much of how we interact with the digital world, and when they work well they seem amost magical.</p> <p>So I thought today I’d take a look at a class of layout algorithms called <em>hierarchical</em> layout algorithms. These represent information that can be encoded in a graph, like a tree or diagram.</p> <p>The problem is, given a set of nodes and edges:</p> <!> <p>How do we generate something like this?</p> <svg class="w-1/2 mx-auto" viewBox="30 0 250 80"><defs><marker id="arrowhead" markerWidth="6" markerHeight="7" refX="4" refY="3.5" orient="auto"><polygon points="0 0, 6 3.5, 0 7"></polygon></marker></defs><text x="50" y="50" font-size="20">🐄</text><text x="150" y="50" font-size="20">🥛</text><text x="250" y="20" font-size="20">🧀</text><text x="250" y="80" font-size="20">🧈</text><line x1="85" y1="45" x2="135" y2="45" style="stroke:rgb(0,0,0);stroke-width:2" marker-end="url(#arrowhead)"></line><line x1="185" y1="45" x2="235" y2="25" style="stroke:rgb(0,0,0);stroke-width:2" marker-end="url(#arrowhead)"></line><line x1="185" y1="45" x2="235" y2="65" style="stroke:rgb(0,0,0);stroke-width:2" marker-end="url(#arrowhead)"></line></svg> <p>Drawing the diagram is easy enough in javascript if you know the coordinates— but how do you know the right coordinates?</p> <p>The industry standard is something called <a href="https://en.wikipedia.org/wiki/Layered_graph_drawing" rel="nofollow">Sugiyama</a>, but implementing it can be thousands of lines of code— see the Javascript implementation, <a href="https://github.com/dagrejs/dagre" rel="nofollow">Dagre</a>, for more on that.</p> <p>Because of space and brain constraints, we’ll look at a common simpler option: the <a href="https://reingold.co/tidier-drawings.pdf" rel="nofollow">Reingold-Tilford algorithm</a>.</p> <h2>Reingold-Tilford</h2> <p>Reingold-Tilford requires us to do four passes over the data:</p> <ol><li>Assign initial coordinates</li> <li>Resolve conflicts between subtrees</li> <li>Apply modifiers to the final coordinates</li> <li>Normalize coordinates</li></ol> <p>Before we do the first step we need to construct a Tree structure:</p> <!> <p>Then assigning initial coordinates is as simple as walking through the tree recursively and</p> <ol><li>Calculate the depth of each node</li> <li>Calculate a position that is in the center of its children</li></ol> <p>Let’s walk through the steps.</p> <span class="bg-gray-200"></span> <div class="flex gap-6"><svg class="h-48 flex-grow" viewBox="0 -50 100 150"><!><!></svg> <div class="w-1/3"><p class="text-yellow-400"> </p> <button class="px-2 py-1 text-white rounded bg-yellow-500">click here</button></div></div> <p>and that’s pretty much sufficient for a really simple tree like this one! I took a shortcut with the arrows for this example and just hardcoded numbers that looked ok— figuring out where the arrows should be is a whole other layout problem!</p> <p>In another post (or maybe just extending this one in the future) we’ll look at the other steps: resolving conflicts with modifiers and normalizing coordinates, and maybe arrows.</p>',1);function Ls(t,e){var B,T,j;hs(e,!0);class n{constructor(s){g(this,B,R(m(new W(0))));g(this,T,R(m(new W(0))));g(this,j,R(0));this.value=s,this.children=[]}get x(){return l(y(this,B))}set x(s){x(y(this,B),m(s))}get y(){return l(y(this,T))}set y(s){x(y(this,T),m(s))}get mod(){return l(y(this,j))}set mod(s){x(y(this,j),m(s))}addChild(s){return this.children.push(s),s}}B=new WeakMap,T=new WeakMap,j=new WeakMap;const p=(o,s=0,a=30)=>{o.y.target=s*a,o.children.forEach(h=>{p(h,s+1,a)})},d=(o,s,a)=>{o.x.target=s,s+=a,o.children.forEach((h,c)=>{d(h,s*(c+1),a)})},i=o=>{o.children.forEach(h=>{i(h)});const s=o.children[0],a=o.children[o.children.length-1];s&&(o.x.target=(s.x.target+a.x.target)/2)},f={nodes:["🐄","🥛","🧀","🧈"],edges:[{in:"🐄",out:"🥛"},{in:"🥛",out:"🧀"},{in:"🥛",out:"🧈"}]};function E(o){const s=new Map;o.nodes.forEach(c=>{s.set(c,new n(c))});const a=new Set;o.edges.forEach(c=>{const F=s.get(c.in),Q=s.get(c.out);F&&Q&&(F.addChild(Q),a.add(c.out))});let h=null;for(const c of o.nodes)if(!a.has(c)){h=s.get(c);break}return h}function v(o){let s=[o];for(const a of o.children)for(const h of v(a))s.push(h);return s}function N(o){let s=[];for(const a of o.children){s.push({from:{x:o.x.target,y:o.y.target},to:{x:a.x.target,y:a.y.target},parent:o,child:a});const h=N(a);s=s.concat(h)}return s}let u=R(m(E(f))),r=m({current:0,finished:!1,text:"We start with our nodes all piled up on top of each other. The first step is to calculate *depth*.",steps:{0:()=>{p(l(u)),r.current++,r.text="We start with the root node and walk the tree, adding a bit of height for each node."},1:()=>{d(l(u),0,20),r.current++,r.text="Then we walk the tree to space out the nodes in a naive way."},2:()=>{i(l(u)),r.current++,r.text="Then we go back and put each node in the middle of its children."},3:()=>{r.current++,r.text="Add some arrows and voila."},4:()=>{r.current++,r.text="Start over?"},5:()=>{r.current=0,x(u,m(E(f))),r.text="Let's go"}}});var b=vs(),_=w(es(b),10);ns(_,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#ECEFF4">&#123;</span></span>
<span class="line"><span style="color:#D8DEE9FF">    nodes</span><span style="color:#ECEFF4">:</span><span style="color:#D8DEE9FF"> [</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">🐄</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧀</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧈</span><span style="color:#ECEFF4">"</span><span style="color:#D8DEE9FF">]</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9FF">    edges</span><span style="color:#ECEFF4">:</span><span style="color:#D8DEE9FF"> [</span></span>
<span class="line"><span style="color:#ECEFF4">        &#123;</span><span style="color:#88C0D0">in</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🐄</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#88C0D0"> out</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">&#125;,</span></span>
<span class="line"><span style="color:#ECEFF4">        &#123;</span><span style="color:#88C0D0">in</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#88C0D0"> out</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧀</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">&#125;,</span></span>
<span class="line"><span style="color:#ECEFF4">        &#123;</span><span style="color:#88C0D0">in</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🥛</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">,</span><span style="color:#88C0D0"> out</span><span style="color:#ECEFF4">:</span><span style="color:#ECEFF4"> "</span><span style="color:#A3BE8C">🧈</span><span style="color:#ECEFF4">"</span><span style="color:#ECEFF4">&#125;,</span></span>
<span class="line"><span style="color:#D8DEE9FF">    ]</span></span>
<span class="line"><span style="color:#ECEFF4">&#125;</span></span></code></pre>`);var U=w(_,20);ns(U,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">class</span><span style="color:#8FBCBB"> TreeNode</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">        constructor</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">value</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">value</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> value</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">children</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9FF"> []</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">x</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span><span style="color:#616E88">  // x-coordinate for drawing</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">y</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span><span style="color:#616E88">  // y-coordinate for drawing</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">mod</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span><span style="color:#616E88"> // modifier for shifting subtrees</span></span>
<span class="line"><span style="color:#ECEFF4">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0">        addChild</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">child</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">            this</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">children</span><span style="color:#ECEFF4">.</span><span style="color:#88C0D0">push</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">child</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">            return</span><span style="color:#D8DEE9"> child</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">        &#125;</span></span>
<span class="line"><span style="color:#ECEFF4">    &#125;</span></span></code></pre>`);var Z=w(U,10),M=z(Z),$=z(M);os($,17,()=>v(l(u)),as,(o,s)=>{var a=Cs(),h=z(a,!0);S(a),Y(()=>{D(a,"x",l(s).x.current),D(a,"y",l(s).y.current),ts(h,l(s).value)}),L(o,a)});var ls=w($);{var ps=o=>{var s=xs(),a=w(es(s));os(a,17,()=>N(l(u)),as,(h,c)=>{var F=ws();Y(()=>{D(F,"x1",l(c).to.x==60?70:l(c).to.x<70?65:75),D(F,"y1",l(c).from.y+6),D(F,"x2",l(c).to.x==60?70:l(c).to.x<70?55:85),D(F,"y2",l(c).to.y-15)}),L(h,F)}),L(o,s)};fs(ls,o=>{r.current>3&&o(ps)})}S(M);var G=w(M,2),O=z(G),is=z(O,!0);S(O);var K=w(O,2);K.__click=function(...o){var s;(s=r.steps[r.current])==null||s.apply(this,o)},S(G),S(Z),Es(4),Y(()=>{ts(is,r.text),K.disabled=r.finished}),L(t,b),ds()}us(["click"]);export{Ls as default,Ns as metadata};
