import{h as Gs,c as Cs,a as Ps,v as Ys,u as Hs,x as Ds,s as Us,F as Zs,T as Ks,C as Z,p as R,n as T,G as fs,l as ss,m as a,t as Qs,o as as}from"./disclose-version.DNOx7Oqc.js";import{b as Vs,a as Xs,g as Js,C as U,M as $s,X as sa,Y as aa,T as na,z as ea,c as oa,Z as la,q as us,h as es,j as os,t as Bs,k as l,Q as k,d as ta,s as hs}from"./runtime.C-37iwFS.js";import{e as P,i as Y}from"./each.CnkBLtXS.js";import{p as z,i as vs,o as ra}from"./index-client.C8niFDdS.js";import{s as f}from"./attributes.rdWudkkO.js";import{b as pa}from"./render.BzjjO4gR.js";function N(o,s,t,p,n){var y=o,d="",i;Vs(()=>{d!==(d=s())&&(i&&(Js(i),i=null),d!==""&&(i=Xs(()=>{if(Gs){Cs.data;for(var e=Ps(),r=e;e!==null&&(e.nodeType!==8||e.data!=="");)r=e,e=e.nextSibling;if(e===null)throw Ys(),Hs;Ds(Cs,r),y=Us(e);return}var m=d+"",E=Zs(m);Ds(E.firstChild,E.lastChild),y.before(E)})))})}const As=typeof window<"u",ca=As?requestAnimationFrame:U,ya=As?()=>performance.now():()=>Date.now(),g={tick:o=>ca(o),now:()=>ya(),tasks:new Set};function ks(o){g.tasks.forEach(s=>{s.c(o)||(g.tasks.delete(s),s.f())}),g.tasks.size!==0&&g.tick(ks)}function ia(o){let s;return g.tasks.size===0&&g.tick(ks),{promise:new Promise(t=>{g.tasks.add(s={c:o,f:t})}),abort(){g.tasks.delete(s)}}}function H(o,s){o.dispatchEvent(new CustomEvent(s))}function Ea(o){const s=o.split("-");return s.length===1?s[0]:s[0]+s.slice(1).map(t=>t[0].toUpperCase()+t.slice(1)).join("")}function ms(o){const s={},t=o.split(";");for(const p of t){const[n,y]=p.split(":");if(!n||y===void 0)break;const d=Ea(n.trim());s[d]=y.trim()}return s}const da=o=>o;function Fa(o,s,t,p){var n=(o&Ks)!==0,y="both",d,i=s.inert,e,r;function m(){return d??(d=t()(s,p==null?void 0:p(),{direction:y}))}var E={is_global:n,in(){s.inert=i,r==null||r.abort(),e==null||e.abort(),H(s,"introstart"),e=ns(s,m(),r,1,()=>{H(s,"introend"),e==null||e.abort(),e=d=void 0},void 0)},out(c){r==null||r.abort(),s.inert=!0,H(s,"outrostart"),r=ns(s,m(),e,0,()=>{H(s,"outroend"),r==null||r.abort(),r=d=void 0,c==null||c()},void 0),r.reset},stop:()=>{e==null||e.abort(),r==null||r.abort()}},u=oa;if((u.transitions??(u.transitions=[])).push(E),pa){let c=n;if(!c){for(var F=u.parent;F&&F.f&$s;)for(;(F=F.parent)&&!(F.f&sa););c=!F||(F.f&aa)!==0}c&&na(()=>{ea(()=>E.in())})}}function ns(o,s,t,p,n,y){var d=p===1;if(la(s)){var i,e=!1;return us(()=>{if(!e){var D=s({direction:d?"in":"out"});i=ns(o,D,t,p,n,y)}}),{abort:()=>{e=!0,i==null||i.abort()},deactivate:()=>i.deactivate(),reset:()=>i.reset(),t:D=>i.t(D)}}if(t==null||t.deactivate(),!(s!=null&&s.duration))return n==null||n(),{abort:U,deactivate:U,reset:U,t:()=>p};const{delay:r=0,css:m,tick:E,easing:u=da}=s;var F=g.now()+r,c=(t==null?void 0:t.t(F))??1-p,C=p-c,w=s.duration*Math.abs(C),O=F+w,B,W;return m?us(()=>{var D=[],v=Math.ceil(w/16.666666666666668);if(d&&r>0){let q=Math.ceil(r/16.666666666666668),K=ms(m(0,1));for(let S=0;S<q;S+=1)D.push(K)}for(var M=0;M<=v;M+=1){var I=c+C*u(M/v),G=m(I,1-I);D.push(ms(G))}B=o.animate(D,{delay:d?0:r,duration:w+(d?r:0),easing:"linear",fill:"forwards"}),B.finished.then(()=>{n==null||n(),p===1&&B.cancel()}).catch(q=>{if(B.startTime!==null&&B.currentTime!==null)throw q})}):(c===0&&(E==null||E(0,1)),W=ia(D=>{if(D>=O)return E==null||E(p,1-p),n==null||n(),!1;if(D>=F){var v=c+C*u((D-F)/w);E==null||E(v,1-v)}return!0})),{abort:()=>{B&&(B.cancel(),B.effect=null),W==null||W.abort(),y==null||y(),n=void 0,y=void 0},deactivate:()=>{n=void 0,y=void 0},reset:()=>{p===0&&(E==null||E(1,0))},t:D=>{var v=c+C*u((D-F)/w);return Math.min(1,Math.max(0,v))}}}const Ca=o=>o;function Da(o,{delay:s=0,duration:t=400,easing:p=Ca}={}){const n=+getComputedStyle(o).opacity;return{delay:s,duration:t,easing:p,css:y=>`opacity: ${y*n}`}}var ua=fs('<path stroke-linecap="square"></path>');function h(o,s){es(s,!0);const t=z(s,"draw",3,"regular"),p=z(s,"stroke",3,"white"),n=z(s,"strokeWidth",3,2),y=z(s,"fill",3,"none"),d=z(s,"strokeDasharray",3,"none"),i=1e3;let e=new Array(i).fill().map((c,C)=>2*Math.PI*(C/i)).map(c=>`L${s.cx+s.r*Math.cos(c)} ${s.cy+s.r*Math.sin(c)}`);const r=t()==="reversed";e=r?e.reverse():e,e[0]=e[0].replace("L","M");let m=k(()=>{if(t()=="none")return i;if(s.time<=s.delay||s.time>s.delay+s.duration+s.hold+5)return 0;let c=i*(s.time-s.delay)/s.duration;return r?1-c:c}),E=k(()=>e.slice(0,l(m)).join(" "));var u=Z(),F=R(u);vs(F,()=>s.time>s.delay&&s.time<s.delay+s.duration,c=>{var C=ua();Bs(()=>{f(C,"d",l(E)),f(C,"stroke",p()),f(C,"fill",y()),f(C,"stroke-dasharray",d()),f(C,"stroke-width",n())}),Fa(3,C,()=>Da),T(c,C)}),T(o,u),os()}function ha(o,s,t){return o<=s?s:o>=t?t:o}var ma=fs('<line stroke-linecap="square"></line>');function b(o,s){es(s,!0);let t=k(()=>ha((s.time-s.delay)/s.duration,0,1)),p=k(()=>s.x0+(s.x2-s.x0)*l(t)),n=k(()=>s.y0+(s.y2-s.y0)*l(t));var y=Z(),d=R(y);vs(d,()=>l(t)>0,i=>{var e=ma();Bs(()=>{f(e,"x1",s.x0),f(e,"y1",s.y0),f(e,"x2",l(p)),f(e,"y2",l(n)),f(e,"stroke",s.stroke),f(e,"stroke-dasharray",s.strokeDashArray),f(e,"stroke-width",s.strokeWidth)}),T(i,e)}),T(o,y),os()}var fa=Qs('<svg viewbox="0 0 600 100" class="w-full mt-24 mb-12 mx-auto"><path d="M0 50 L 250 50" stroke="#2C5943" stroke-dasharray="0 1 0"></path><path d="M300 50 L 600 50" stroke="#2C5943" stroke-dasharray="0 1 0"></path><!><rect x="100" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><!><!><!><!><!><rect x="250" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><path d="M300 0 L 300 100" stroke="white" stroke-dasharray="0 1 0"></path><path d="M250 50 L 350 50" stroke="white" stroke-dasharray="0 1 0"></path><!><!><!><!><!><rect x="400" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><!><!><!><!></svg> <p>I build <a href="https://twirldata.com" rel="nofollow">a website recently for work</a>, and as part of that process I got connected to fantastic designer who came up with an awesome vibrant and fun look for the site.</p> <p>One aspect of her vision was to include lots of fun iconographics and animations, and it turned out sheâ€™s skilled at making the required 2D renderings in <a href="https://www.adobe.com/products/aftereffects.html" rel="nofollow">AfterEffects</a>.</p> <p>The animations were really cool, but the exported gifs werenâ€™t always as smooth as I would have liked. We achieved a higher quality of visual by switching from gifs to <a href="https://lottiefiles.com/" rel="nofollow">lotties</a>, but I had an feeling I could do the visuals with svg animated by javascript and it would render silky smooth.</p> <svg viewbox="0 0 500 100" class="my-12 mx-auto">rect> <!><!></svg> <p>The idea is basically to define a svelte <code>$state()</code> variable containing the timing (how far into a loop we are), and then pass that to child components to compute what they should look like based on their own delay, duration, and shape.</p> <p>Hereâ€™s everything I ended up needed for the animation timing (cribbed from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame#examples" rel="nofollow">here</a>).</p> <!> <p>What I like about the example Iâ€™m recreating here is itâ€™s tight timing and sense of rhythm. To achieve that, we just have a Svelte component that receives the <code>time</code> prop from the parent above, and then computes an SVG <code>&lt;path/&gt;</code> that corresponds to the desired effect and timing.</p> <div class="p-4 bg-gray-200"><p>Note the <a href="https://svelte.dev/docs/svelte-transition" rel="nofollow">svelte/transition</a> package has <code>draw</code> in it, which achieves much of the same effect by <a href="https://css-tricks.com/svg-line-animation-works/" rel="nofollow">stroke-dash animation</a>--- but I wanted my lines to retain their stroke dashes, and also to build towards more complicated shapes that canâ€™t be animated with this trick.</p></div> <p>Once you have the timing, Svelte makes the rest really easy.</p> <svg viewbox="0 0 600 100" class="w-full mx-auto"><!><!><!></svg> <p>The main thing is to compute what fraction of the way through the animation we are based on the timing, delay, and duration.</p> <!> <p>We donâ€™t want the fraction to be less than 0 or greater than 1, so we clamp the value to that interval. It would be nice if <code>clamp</code> were <a href="https://stackoverflow.com/questions/11409895/whats-the-most-elegant-way-to-cap-a-number-to-a-segment#comment137766458_39477954" rel="nofollow">part of Math</a>, but since itâ€™s not, weâ€™ll borrow a suggested implementation:</p> <!> <p>and then we just construct an svg element that uses the fraction to interpolate where it should be</p> <!> <p>The colorful lines above are just</p> <!> <p>The circles are the same deal, mostly. We use trigonometry to get some points on a circle, and then figure out what points are visible based on the timing and draw a <code>path</code> element.</p> <p>Iâ€™m not sure whatâ€™s next. It seems like it would be pretty easy to add <a href="https://svelte.dev/docs/svelte-easing" rel="nofollow">easing</a>, but Iâ€™d also like to explore <a href="https://www.youtube.com/watch?v=qlfh_rv6khY" rel="nofollow">procedural animation</a>, or maybe incorporating <a href="https://brm.io/matter-js/" rel="nofollow">physics</a>. Stay tuned.</p> <div class="flex place-content-center">ðŸ”²</div>',1);const xa={layout:"post",title:"Svelte animations",date:"2024-09-27T00:00:00.000Z"};function _a(o,s){es(s,!0);const t=5500;let p,n=ta(void 0);function y(x){p=x,d(x)}function d(x){hs(n,x-p),l(n)<t?requestAnimationFrame(_=>d(_)):(hs(n,0),setTimeout(()=>requestAnimationFrame(y),100))}ra(()=>{requestAnimationFrame(y)});var i=fa(),e=R(i),r=ss(e),m=a(r),E=a(m);b(E,{x0:0,x2:100,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return l(n)},delay:"0",duration:250});var u=a(E),F=a(u);h(F,{cx:150,cy:50,r:25,get time(){return l(n)},delay:"250",duration:"500",hold:"500",draw:"reversed"});var c=a(F);h(c,{cx:150,cy:50,r:35,get time(){return l(n)},delay:"750",duration:"500",strokeDasharray:"4 4"});var C=a(c);h(C,{cx:150,cy:50,r:45,get time(){return l(n)},delay:"1250",duration:"500",strokeDasharray:"0 4"});var w=a(C);h(w,{cx:150,cy:50,r:25,get time(){return l(n)},delay:"1750",duration:"500",hold:"400"});var O=a(w);b(O,{x0:200,x2:250,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return l(n)},delay:"2250",duration:250});var B=a(O),W=a(B),D=a(W),v=a(D);h(v,{cx:300,cy:50,r:25,get time(){return l(n)},stroke:"none",fill:"white",delay:"2500",duration:"250",hold:"500",draw:"none"});var M=a(v);h(M,{cx:300,cy:50,r:25,get time(){return l(n)},delay:"0",duration:"4000",hold:"500",draw:"none"});var I=a(M);h(I,{cx:300,cy:50,r:35,get time(){return l(n)},delay:"3000",duration:"500"});var G=a(I);h(G,{cx:300,cy:50,r:45,get time(){return l(n)},delay:"3500",duration:"500",strokeDasharray:"0 4"});var q=a(G);b(q,{x0:350,x2:450,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return l(n)},delay:"4000",duration:250});var K=a(q),S=a(K);h(S,{cx:450,cy:50,r:25,get time(){return l(n)},delay:"0",duration:"4000",hold:"500",draw:"none"});var ls=a(S);h(ls,{cx:450,cy:50,r:28,get time(){return l(n)},delay:"4250",duration:"500",hold:"500",strokeWidth:10});var ts=a(ls);h(ts,{cx:450,cy:50,r:45,get time(){return l(n)},delay:"4750",duration:"500",strokeDasharray:"0 4"});var gs=a(ts);b(gs,{x0:500,x2:600,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return l(n)},delay:"5250",duration:250}),as(e);var ws=a(a(e,!0)),xs=a(a(ws,!0)),_s=a(a(xs,!0)),Q=a(a(_s,!0)),rs=a(ss(Q));P(rs,16,()=>[100,200,300,400],Y,(x,_)=>{var L=Z(),X=R(L);P(X,16,()=>Array(5).fill().map((j,A)=>A*10),Y,(j,A)=>{var J=k(()=>.5*A),$=k(()=>5*_+5*A);h(j,{get cx(){return _},cy:50,get r(){return l(J)},get time(){return l(n)},stroke:"#2C5943",strokeWidth:1,get delay(){return l($)},duration:500,hold:"500",draw:"none"})}),T(x,L)});var bs=a(rs);P(bs,16,()=>[100,200,300,400],Y,(x,_)=>{var L=Z(),X=R(L);P(X,16,()=>Array(5).fill().map((j,A)=>A*10),Y,(j,A)=>{var J=k(()=>.5*A),$=k(()=>2e3+5*_+5*A);h(j,{get cx(){return _},cy:50,get r(){return l(J)},get time(){return l(n)},stroke:"#2C5943",strokeWidth:1,get delay(){return l($)},duration:500,hold:"500",draw:"none"})}),T(x,L)}),as(Q);var Ts=a(a(Q,!0)),Ws=a(a(Ts,!0)),ps=a(a(Ws,!0));N(ps,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;script></span></span>
<span class="line"><span style="color:#81A1C1">  import</span><span style="color:#ECEFF4"> &#123;</span><span style="color:#8FBCBB"> onMount</span><span style="color:#ECEFF4"> &#125;</span><span style="color:#81A1C1"> from</span><span style="color:#ECEFF4"> '</span><span style="color:#A3BE8C">svelte</span><span style="color:#ECEFF4">'</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">  let</span><span style="color:#D8DEE9"> zero</span></span>
<span class="line"><span style="color:#81A1C1">  let</span><span style="color:#D8DEE9"> time</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">state</span><span style="color:#D8DEE9FF">()</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">  const</span><span style="color:#D8DEE9"> loop_time</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 5_500</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">  function</span><span style="color:#88C0D0"> firstFrame</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">    zero</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> timestamp</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#88C0D0">    animate</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">  function</span><span style="color:#88C0D0"> animate</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">    time</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> timestamp</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> zero</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">    if</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> &#x3C;</span><span style="color:#D8DEE9"> loop_time</span><span style="color:#D8DEE9FF">) </span><span style="color:#ECEFF4">&#123;</span></span>
<span class="line"><span style="color:#88C0D0">      requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">t</span><span style="color:#ECEFF4">)</span><span style="color:#81A1C1"> =></span><span style="color:#88C0D0"> animate</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">t</span><span style="color:#D8DEE9FF">))</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">    &#125;</span><span style="color:#81A1C1"> else</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">      time</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#88C0D0">      setTimeout</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">()</span><span style="color:#81A1C1"> =></span><span style="color:#88C0D0"> requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">firstFrame</span><span style="color:#D8DEE9FF">)</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 100</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">    &#125;</span></span>
<span class="line"><span style="color:#ECEFF4">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0">  onMount</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">()</span><span style="color:#81A1C1"> =></span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#88C0D0">    requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">firstFrame</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">  &#125;</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/script></span></span></code></pre>`);var Ms=a(a(ps,!0)),qs=a(a(Ms,!0)),Is=a(a(qs,!0)),V=a(a(Is,!0)),cs=ss(V);b(cs,{x0:0,x2:600,y0:50,y2:50,stroke:"Tomato",strokeWidth:20,strokeDashArray:"0 25 0 25 0 25",delay:"0",duration:"3000",get time(){return l(n)}});var ys=a(cs);b(ys,{x0:0,x2:600,y0:20,y2:30,stroke:"MediumSeaGreen",strokeWidth:20,strokeDashArray:"0 0 50 0 25 50 25",delay:"0",duration:"4000",get time(){return l(n)}});var Ss=a(ys);b(Ss,{x0:0,x2:600,y0:40,y2:10,stroke:"DodgerBlue",strokeWidth:10,strokeDashArray:"0 25 50 0 25 50 25",delay:"3000",duration:"500",get time(){return l(n)}}),as(V);var Ls=a(a(V,!0)),is=a(a(Ls,!0));N(is,()=>'<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">let</span><span style="color:#D8DEE9"> fraction</span><span style="color:#81A1C1"> =</span><span style="color:#88C0D0"> $derived</span><span style="color:#D8DEE9FF">((</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> delay</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">/</span><span style="color:#D8DEE9"> duration</span><span style="color:#D8DEE9FF">)</span></span></code></pre>');var js=a(a(is,!0)),Es=a(a(js,!0));N(Es,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">function</span><span style="color:#88C0D0"> clamp</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">num</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> min</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> max</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">    return</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1"> &#x3C;=</span><span style="color:#D8DEE9"> min</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#81A1C1">      ?</span><span style="color:#D8DEE9"> min</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#81A1C1">      :</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1"> >=</span><span style="color:#D8DEE9"> max</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#81A1C1">        ?</span><span style="color:#D8DEE9"> max</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#81A1C1">        :</span><span style="color:#D8DEE9"> num</span></span>
<span class="line"><span style="color:#ECEFF4">  &#125;</span></span></code></pre>`);var zs=a(a(Es,!0)),ds=a(a(zs,!0));N(ds,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;script></span></span>
<span class="line"><span style="color:#81A1C1">  const</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">    x1</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    y1</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    xto</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    yto</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    delay</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    duration</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    time</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    stroke</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    strokeWidth</span><span style="color:#ECEFF4">,</span></span>
<span class="line"><span style="color:#D8DEE9">    strokeDasharray</span></span>
<span class="line"><span style="color:#ECEFF4">  &#125;</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">props</span><span style="color:#D8DEE9FF">()</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">  let</span><span style="color:#D8DEE9"> fraction</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#88C0D0">clamp</span><span style="color:#D8DEE9FF">((</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> delay</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">/</span><span style="color:#D8DEE9"> duration</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 0</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 1</span><span style="color:#D8DEE9FF">))</span></span>
<span class="line"><span style="color:#81A1C1">  let</span><span style="color:#D8DEE9"> x2</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">x1</span><span style="color:#81A1C1"> +</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">xto</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> x1</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">*</span><span style="color:#D8DEE9"> fraction</span><span style="color:#D8DEE9FF">)</span></span>
<span class="line"><span style="color:#81A1C1">  let</span><span style="color:#D8DEE9"> y2</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">y1</span><span style="color:#81A1C1"> +</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">yto</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> y1</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">*</span><span style="color:#D8DEE9"> fraction</span><span style="color:#D8DEE9FF">)</span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/script></span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">&#x3C;line</span></span>
<span class="line"><span style="color:#8FBCBB">  &#123;</span><span style="color:#D8DEE9">x1</span><span style="color:#8FBCBB">&#125;</span><span style="color:#8FBCBB"> &#123;</span><span style="color:#D8DEE9">y1</span><span style="color:#8FBCBB">&#125;</span><span style="color:#8FBCBB"> &#123;</span><span style="color:#D8DEE9">x2</span><span style="color:#8FBCBB">&#125;</span><span style="color:#8FBCBB"> &#123;</span><span style="color:#D8DEE9">y2</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">  &#123;</span><span style="color:#D8DEE9">stroke</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">  stroke-dasharray</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">strokeDasharray</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">  stroke-linecap</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">square</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">  stroke-width</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">strokeWidth</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">></span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/line></span></span></code></pre>`);var Ns=a(a(ds,!0)),Fs=a(a(Ns,!0));N(Fs,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;svg</span><span style="color:#8FBCBB"> viewbox</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 0 600 100</span><span style="color:#ECEFF4">"</span><span style="color:#8FBCBB"> class</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">w-full mx-auto</span><span style="color:#ECEFF4">"</span><span style="color:#81A1C1">></span></span>
<span class="line"><span style="color:#81A1C1">  &#x3C;</span><span style="color:#8FBCBB">Line</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#8FBCBB">    x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">40</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">10</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">DodgerBlue</span><span style="color:#ECEFF4">"</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#8FBCBB">    strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">10</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 25 50 0 25 50 25</span><span style="color:#ECEFF4">"</span><span style="color:#8FBCBB"> delay</span><span style="color:#ECEFF4">=</span><span style="color:#B48EAD">3000</span><span style="color:#8FBCBB"> duration</span><span style="color:#ECEFF4">=</span><span style="color:#B48EAD">500</span><span style="color:#8FBCBB"> &#123;</span><span style="color:#D8DEE9">time</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">  /></span></span>
<span class="line"><span style="color:#81A1C1">  &#x3C;</span><span style="color:#8FBCBB">Line</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#8FBCBB">    x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">50</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">50</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">Tomato</span><span style="color:#ECEFF4">"</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#8FBCBB">    strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 25 0 25 0 25</span><span style="color:#ECEFF4">"</span><span style="color:#8FBCBB"> delay</span><span style="color:#ECEFF4">=</span><span style="color:#B48EAD">0</span><span style="color:#8FBCBB"> duration</span><span style="color:#ECEFF4">=</span><span style="color:#B48EAD">3000</span><span style="color:#8FBCBB"> &#123;</span><span style="color:#D8DEE9">time</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">  /></span></span>
<span class="line"><span style="color:#81A1C1">  &#x3C;</span><span style="color:#8FBCBB">Line</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#8FBCBB">    x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">30</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">MediumSeaGreen</span><span style="color:#ECEFF4">"</span><span style="color:#D8DEE9FF"> </span></span>
<span class="line"><span style="color:#8FBCBB">    strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span><span style="color:#8FBCBB"> strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 0 50 0 25 50 25</span><span style="color:#ECEFF4">"</span><span style="color:#8FBCBB"> delay</span><span style="color:#ECEFF4">=</span><span style="color:#B48EAD">0</span><span style="color:#8FBCBB"> duration</span><span style="color:#ECEFF4">=</span><span style="color:#B48EAD">4000</span><span style="color:#8FBCBB"> &#123;</span><span style="color:#D8DEE9">time</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">  /></span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/svg></span></span></code></pre>`);var Rs=a(a(Fs,!0)),Os=a(a(Rs,!0));a(a(Os,!0)),T(o,i),os()}export{_a as default,xa as metadata};
