import{b as os,e as ms,c as P,a as w,n as ds,t as fs}from"./disclose-version.D1cl9r6R.js";import{b as us,h as ls,Q as ts,d as As,f as ps,ak as Bs,aF as vs,aE as gs,V as ks,af as ws,e as _s,E as xs,aJ as bs,aK as Ws,i as Ts,u as Is,N as rs,aL as Ms,q as qs,n as M,aM as Ls,az as cs,C as is,ah as Ss,p as Z,al as S,a as X,t as Fs,g as m,J as B,au as Ns,A as ys,at as Os,s as r,c as V,r as Y,o as Rs}from"./runtime.DcUOeyHB.js";import{e as j,i as z}from"./each.BhopzhV1.js";import{i as Cs}from"./if.CcjKBy15.js";import{s as f}from"./attributes.DZQztxHe.js";import{l as js}from"./loop.BGGTUj09.js";import{b as zs}from"./render.CIZPRaGG.js";import{p as q}from"./props.DGfYRV2k.js";function L(n,s,a,o,c){var i=n,l="",y;us(()=>{if(l===(l=s()??"")){ls&&ts();return}y!==void 0&&(_s(y),y=void 0),l!==""&&(y=As(()=>{if(ls){ps.data;for(var e=ts(),p=e;e!==null&&(e.nodeType!==8||e.data!=="");)p=e,e=Bs(e);if(e===null)throw vs(),gs;os(ps,p),i=ks(e);return}var E=l+"",C=ms(E);os(ws(C),C.lastChild),i.before(C)}))})}function G(n,s){n.dispatchEvent(new CustomEvent(s))}function Gs(n){if(n==="float")return"cssFloat";if(n==="offset")return"cssOffset";if(n.startsWith("--"))return n;const s=n.split("-");return s.length===1?s[0]:s[0]+s.slice(1).map(a=>a[0].toUpperCase()+a.slice(1)).join("")}function Es(n){const s={},a=n.split(";");for(const o of a){const[c,i]=o.split(":");if(!c||i===void 0)break;const l=Gs(c.trim());s[l]=i.trim()}return s}const Ps=n=>n;function Us(n,s,a,o){var c=(n&Ls)!==0,i="both",l,y=s.inert,e,p;function E(){var t=Ss,d=rs;cs(null),is(null);try{return l??(l=a()(s,(o==null?void 0:o())??{},{direction:i}))}finally{cs(t),is(d)}}var C={is_global:c,in(){s.inert=y,G(s,"introstart"),e=Q(s,E(),p,1,()=>{G(s,"introend"),e==null||e.abort(),e=l=void 0})},out(t){s.inert=!0,G(s,"outrostart"),p=Q(s,E(),e,0,()=>{G(s,"outroend"),t==null||t()})},stop:()=>{e==null||e.abort(),p==null||p.abort()}},D=rs;if((D.transitions??(D.transitions=[])).push(C),zs){var u=c;if(!u){for(var F=D.parent;F&&F.f&xs;)for(;(F=F.parent)&&!(F.f&bs););u=!F||(F.f&Ws)!==0}u&&Ts(()=>{Is(()=>C.in())})}}function Q(n,s,a,o,c){var i=o===1;if(Ms(s)){var l,y=!1;return qs(()=>{if(!y){var d=s({direction:i?"in":"out"});l=Q(n,d,a,o,c)}}),{abort:()=>{y=!0,l==null||l.abort()},deactivate:()=>l.deactivate(),reset:()=>l.reset(),t:()=>l.t()}}if(a==null||a.deactivate(),!(s!=null&&s.duration))return c(),{abort:M,deactivate:M,reset:M,t:()=>o};const{delay:e=0,css:p,tick:E,easing:C=Ps}=s;var D=[];if(i&&a===void 0&&(E&&E(0,1),p)){var u=Es(p(0,1));D.push(u,u)}var F=()=>1-o,t=n.animate(D,{duration:e});return t.onfinish=()=>{var d=(a==null?void 0:a.t())??1-o;a==null||a.abort();var _=o-d,g=s.duration*Math.abs(_),N=[];if(g>0){if(p)for(var x=Math.ceil(g/16.666666666666668),b=0;b<=x;b+=1){var O=d+_*C(b/x),R=p(O,1-O);N.push(Es(R))}F=()=>{var v=t.currentTime;return d+_*C(v/g)},E&&js(()=>{if(t.playState!=="running")return!1;var v=F();return E(v,1-v),!0})}t=n.animate(N,{duration:g,fill:"forwards"}),t.onfinish=()=>{F=()=>o,E==null||E(o,1-o),c()}},{abort:()=>{t&&(t.cancel(),t.effect=null,t.onfinish=M)},deactivate:()=>{c=M},reset:()=>{o===0&&(E==null||E(1,0))},t:()=>F()}}const Hs=n=>n;function Js(n,{delay:s=0,duration:a=400,easing:o=Hs}={}){const c=+getComputedStyle(n).opacity;return{delay:s,duration:a,easing:o,css:i=>`opacity: ${i*c}`}}var Ks=ds('<path stroke-linecap="square"></path>');function h(n,s){Z(s,!0);const a=q(s,"draw",3,"regular"),o=q(s,"stroke",3,"white"),c=q(s,"strokeWidth",3,2),i=q(s,"fill",3,"none"),l=q(s,"strokeDasharray",3,"none"),y=1e3;let e=new Array(y).fill().map((t,d)=>2*Math.PI*(d/y)).map(t=>`L${s.cx+s.r*Math.cos(t)} ${s.cy+s.r*Math.sin(t)}`);const p=a()==="reversed";e=p?e.reverse():e,e[0]=e[0].replace("L","M");let E=B(()=>{if(a()=="none")return y;if(s.time<=s.delay||s.time>s.delay+s.duration+s.hold+5)return 0;let t=y*(s.time-s.delay)/s.duration;return p?1-t:t}),C=B(()=>e.slice(0,m(E)).join(" "));var D=P(),u=S(D);{var F=t=>{var d=Ks();Fs(()=>{f(d,"d",m(C)),f(d,"stroke",o()),f(d,"fill",i()),f(d,"stroke-dasharray",l()),f(d,"stroke-width",c())}),Us(3,d,()=>Js),w(t,d)};Cs(u,t=>{s.time>s.delay&&s.time<s.delay+s.duration&&t(F)})}w(n,D),X()}function Vs(n,s,a){return n<=s?s:n>=a?a:n}var Ys=ds('<line stroke-linecap="square"></line>');function k(n,s){Z(s,!0);let a=B(()=>Vs((s.time-s.delay)/s.duration,0,1)),o=B(()=>s.x0+(s.x2-s.x0)*m(a)),c=B(()=>s.y0+(s.y2-s.y0)*m(a));var i=P(),l=S(i);{var y=e=>{var p=Ys();Fs(()=>{f(p,"x1",s.x0),f(p,"y1",s.y0),f(p,"x2",m(o)),f(p,"y2",m(c)),f(p,"stroke",s.stroke),f(p,"stroke-dasharray",s.strokeDashArray),f(p,"stroke-width",s.strokeWidth)}),w(e,p)};Cs(l,e=>{m(a)>0&&e(y)})}w(n,i),X()}function Qs(n){let s,a=Ns(void 0);function o(){ys(a,0),requestAnimationFrame(c)}function c(l){s=l,i(l)}function i(l){ys(a,l-s),m(a)<n?requestAnimationFrame(y=>i(y)):o()}return{get time(){return m(a)},start:o}}const ta={layout:"post",title:"Svelte animations",summary:"Exploring simple animation on the web",date:"2024-09-27T00:00:00.000Z"};var Zs=fs('<svg viewbox="0 0 600 100" class="w-full mt-24 mb-12 mx-auto"><path d="M0 50 L 250 50" stroke="#2C5943" stroke-dasharray="0 1 0"></path><path d="M300 50 L 600 50" stroke="#2C5943" stroke-dasharray="0 1 0"></path><!><rect x="100" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><!><!><!><!><!><rect x="250" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><path d="M300 0 L 300 100" stroke="white" stroke-dasharray="0 1 0"></path><path d="M250 50 L 350 50" stroke="white" stroke-dasharray="0 1 0"></path><!><!><!><!><!><rect x="400" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><!><!><!><!></svg> <p>I build <a href="https://twirldata.com" rel="nofollow">a website recently for work</a>, and as part of that process I got connected to fantastic designer who came up with an awesome vibrant and fun look for the site.</p> <p>One aspect of her vision was to include lots of fun iconographics and animations, and it turned out sheâ€™s skilled at making the required 2D renderings in <a href="https://www.adobe.com/products/aftereffects.html" rel="nofollow">AfterEffects</a>.</p> <p>The animations were really cool, but the exported gifs werenâ€™t always as smooth as I would have liked. We achieved a higher quality of visual by switching from gifs to <a href="https://lottiefiles.com/" rel="nofollow">lotties</a>, but I had an feeling I could do the visuals with svg animated by javascript and it would render silky smooth.</p> <svg viewbox="0 0 500 100" class="my-12 mx-auto">rect> <!><!></svg> <p>The idea is basically to define a svelte <code>$state()</code> variable containing the timing (how far into a loop we are), and then pass that to child components to compute what they should look like based on their own delay, duration, and shape.</p> <p>Hereâ€™s everything I ended up needed for the animation timing (cribbed from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame#examples" rel="nofollow">here</a>).</p> <!> <p>What I like about the example Iâ€™m recreating here is itâ€™s tight timing and sense of rhythm. To achieve that, we just have a Svelte component that receives the <code>time</code> prop from the parent above, and then computes an SVG <code>&lt;path/&gt;</code> that corresponds to the desired effect and timing.</p> <div class="p-4 bg-gray-200"><p>Note the <a href="https://svelte.dev/docs/svelte-transition" rel="nofollow">svelte/transition</a> package has <code>draw</code> in it, which achieves much of the same effect by <a href="https://css-tricks.com/svg-line-animation-works/" rel="nofollow">stroke-dash animation</a>--- but I wanted my lines to retain their stroke dashes, and also to build towards more complicated shapes that canâ€™t be animated with this trick.</p></div> <p>Once you have the timing, Svelte makes the rest really easy.</p> <svg viewbox="0 0 600 100" class="w-full mx-auto"><!><!><!></svg> <p>The main thing is to compute what fraction of the way through the animation we are based on the timing, delay, and duration.</p> <!> <p>We donâ€™t want the fraction to be less than 0 or greater than 1, so we clamp the value to that interval. It would be nice if <code>clamp</code> were <a href="https://stackoverflow.com/questions/11409895/whats-the-most-elegant-way-to-cap-a-number-to-a-segment#comment137766458_39477954" rel="nofollow">part of Math</a>, but since itâ€™s not, weâ€™ll borrow a suggested implementation:</p> <!> <p>and then we just construct an svg element that uses the fraction to interpolate where it should be</p> <!> <p>The colorful lines above are just</p> <!> <p>The circles are the same deal, mostly. We use trigonometry to get some points on a circle, and then figure out what points are visible based on the timing and draw a <code>path</code> element.</p> <p>Iâ€™m not sure whatâ€™s next. It seems like it would be pretty easy to add <a href="https://svelte.dev/docs/svelte-easing" rel="nofollow">easing</a>, but Iâ€™d also like to explore <a href="https://www.youtube.com/watch?v=qlfh_rv6khY" rel="nofollow">procedural animation</a>, or maybe incorporating <a href="https://brm.io/matter-js/" rel="nofollow">physics</a>. Stay tuned.</p> <p><strong>Update</strong>: Svelte 5 introduces a new tweening option that significantly simplifies this process. The approach described below still works, but the new API reduces verbosity and makes animation easier to implement. Check the <a href="https://svelte.dev/docs/svelte/svelte-motion" rel="nofollow">svelte-motion documentation</a> for details on the new tweening syntax.</p> <div class="flex place-content-center">ðŸ”²</div>',1);function pa(n,s){Z(s,!0);let a=Qs(5500);Os(()=>{a.start()});var o=Zs(),c=S(o),i=r(V(c),2);k(i,{x0:0,x2:100,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"0",duration:250});var l=r(i,2);h(l,{cx:150,cy:50,r:25,get time(){return a.time},delay:"250",duration:"500",hold:"500",draw:"reversed"});var y=r(l);h(y,{cx:150,cy:50,r:35,get time(){return a.time},delay:"750",duration:"500",strokeDasharray:"4 4"});var e=r(y);h(e,{cx:150,cy:50,r:45,get time(){return a.time},delay:"1250",duration:"500",strokeDasharray:"0 4"});var p=r(e);h(p,{cx:150,cy:50,r:25,get time(){return a.time},delay:"1750",duration:"500",hold:"400"});var E=r(p);k(E,{x0:200,x2:250,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"2250",duration:250});var C=r(E,4);h(C,{cx:300,cy:50,r:25,get time(){return a.time},stroke:"none",fill:"white",delay:"2500",duration:"250",hold:"500",draw:"none"});var D=r(C);h(D,{cx:300,cy:50,r:25,get time(){return a.time},delay:"0",duration:"4000",hold:"500",draw:"none"});var u=r(D);h(u,{cx:300,cy:50,r:35,get time(){return a.time},delay:"3000",duration:"500"});var F=r(u);h(F,{cx:300,cy:50,r:45,get time(){return a.time},delay:"3500",duration:"500",strokeDasharray:"0 4"});var t=r(F);k(t,{x0:350,x2:450,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"4000",duration:250});var d=r(t,2);h(d,{cx:450,cy:50,r:25,get time(){return a.time},delay:"0",duration:"4000",hold:"500",draw:"none"});var _=r(d);h(_,{cx:450,cy:50,r:28,get time(){return a.time},delay:"4250",duration:"500",hold:"500",strokeWidth:10});var g=r(_);h(g,{cx:450,cy:50,r:45,get time(){return a.time},delay:"4750",duration:"500",strokeDasharray:"0 4"});var N=r(g);k(N,{x0:500,x2:600,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"5250",duration:250}),Y(c);var x=r(c,8),b=r(V(x));j(b,16,()=>[100,200,300,400],z,(U,W)=>{var T=P(),H=S(T);j(H,16,()=>Array(5).fill().map((I,A)=>A*10),z,(I,A)=>{var J=B(()=>.5*A),K=B(()=>5*W+5*A);h(I,{get cx(){return W},cy:50,get r(){return m(J)},get time(){return a.time},stroke:"#2C5943",strokeWidth:1,get delay(){return m(K)},duration:500,hold:"500",draw:"none"})}),w(U,T)});var O=r(b);j(O,16,()=>[100,200,300,400],z,(U,W)=>{var T=P(),H=S(T);j(H,16,()=>Array(5).fill().map((I,A)=>A*10),z,(I,A)=>{var J=B(()=>.5*A),K=B(()=>2e3+5*W+5*A);h(I,{get cx(){return W},cy:50,get r(){return m(J)},get time(){return a.time},stroke:"#2C5943",strokeWidth:1,get delay(){return m(K)},duration:500,hold:"500",draw:"none"})}),w(U,T)}),Y(x);var R=r(x,6);L(R,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;script></span></span>
<span class="line"><span style="color:#81A1C1">	import</span><span style="color:#ECEFF4"> &#123;</span><span style="color:#8FBCBB"> onMount</span><span style="color:#ECEFF4"> &#125;</span><span style="color:#81A1C1"> from</span><span style="color:#ECEFF4"> '</span><span style="color:#A3BE8C">svelte</span><span style="color:#ECEFF4">'</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> zero</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> time</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">state</span><span style="color:#D8DEE9FF">()</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	const</span><span style="color:#D8DEE9"> loop_time</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 5_500</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	function</span><span style="color:#88C0D0"> firstFrame</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">		zero</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> timestamp</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#88C0D0">		animate</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	function</span><span style="color:#88C0D0"> animate</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">		time</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> timestamp</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> zero</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">		if</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> &#x3C;</span><span style="color:#D8DEE9"> loop_time</span><span style="color:#D8DEE9FF">) </span><span style="color:#ECEFF4">&#123;</span></span>
<span class="line"><span style="color:#88C0D0">			requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">t</span><span style="color:#ECEFF4">)</span><span style="color:#81A1C1"> =></span><span style="color:#88C0D0"> animate</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">t</span><span style="color:#D8DEE9FF">))</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">		&#125;</span><span style="color:#81A1C1"> else</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">			time</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#88C0D0">			setTimeout</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">()</span><span style="color:#81A1C1"> =></span><span style="color:#88C0D0"> requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">firstFrame</span><span style="color:#D8DEE9FF">)</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 100</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">		&#125;</span></span>
<span class="line"><span style="color:#ECEFF4">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0">	onMount</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">()</span><span style="color:#81A1C1"> =></span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#88C0D0">		requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">firstFrame</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">	&#125;</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/script></span></span></code></pre>`);var v=r(R,8),$=V(v);k($,{x0:0,x2:600,y0:50,y2:50,stroke:"Tomato",strokeWidth:20,strokeDashArray:"0 25 0 25 0 25",delay:"0",duration:"3000",get time(){return a.time}});var ss=r($);k(ss,{x0:0,x2:600,y0:20,y2:30,stroke:"MediumSeaGreen",strokeWidth:20,strokeDashArray:"0 0 50 0 25 50 25",delay:"0",duration:"4000",get time(){return a.time}});var Ds=r(ss);k(Ds,{x0:0,x2:600,y0:40,y2:10,stroke:"DodgerBlue",strokeWidth:10,strokeDashArray:"0 25 50 0 25 50 25",delay:"3000",duration:"500",get time(){return a.time}}),Y(v);var as=r(v,4);L(as,()=>'<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">let</span><span style="color:#D8DEE9"> fraction</span><span style="color:#81A1C1"> =</span><span style="color:#88C0D0"> $derived</span><span style="color:#D8DEE9FF">((</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> delay</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">/</span><span style="color:#D8DEE9"> duration</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span></code></pre>');var ns=r(as,4);L(ns,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">function</span><span style="color:#88C0D0"> clamp</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">num</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> min</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> max</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">	return</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1"> &#x3C;=</span><span style="color:#D8DEE9"> min</span><span style="color:#81A1C1"> ?</span><span style="color:#D8DEE9"> min</span><span style="color:#81A1C1"> :</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1"> >=</span><span style="color:#D8DEE9"> max</span><span style="color:#81A1C1"> ?</span><span style="color:#D8DEE9"> max</span><span style="color:#81A1C1"> :</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">&#125;</span></span></code></pre>`);var es=r(ns,4);L(es,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;script></span></span>
<span class="line"><span style="color:#81A1C1">	const</span><span style="color:#ECEFF4"> &#123;</span><span style="color:#D8DEE9"> x1</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> y1</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> xto</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> yto</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> delay</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> duration</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> time</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> stroke</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> strokeWidth</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> strokeDasharray</span><span style="color:#ECEFF4"> &#125;</span><span style="color:#81A1C1"> =</span></span>
<span class="line"><span style="color:#81A1C1">		$</span><span style="color:#88C0D0">props</span><span style="color:#D8DEE9FF">()</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> fraction</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#88C0D0">clamp</span><span style="color:#D8DEE9FF">((</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> delay</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">/</span><span style="color:#D8DEE9"> duration</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 0</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 1</span><span style="color:#D8DEE9FF">))</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> x2</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">x1</span><span style="color:#81A1C1"> +</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">xto</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> x1</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">*</span><span style="color:#D8DEE9"> fraction</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> y2</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">y1</span><span style="color:#81A1C1"> +</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">yto</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> y1</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">*</span><span style="color:#D8DEE9"> fraction</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/script></span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">&#x3C;line</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">x1</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">y1</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">x2</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">y2</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">stroke</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	stroke-dasharray</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">strokeDasharray</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	stroke-linecap</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">square</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">	stroke-width</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">strokeWidth</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">></span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/line></span></span></code></pre>`);var hs=r(es,4);L(hs,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;svg</span><span style="color:#8FBCBB"> viewbox</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 0 600 100</span><span style="color:#ECEFF4">"</span><span style="color:#8FBCBB"> class</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">w-full mx-auto</span><span style="color:#ECEFF4">"</span><span style="color:#81A1C1">></span></span>
<span class="line"><span style="color:#81A1C1">	&#x3C;</span><span style="color:#8FBCBB">Line</span></span>
<span class="line"><span style="color:#8FBCBB">		x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">40</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">10</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">DodgerBlue</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">10</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 25 50 0 25 50 25</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		delay</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">3000</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		duration</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">500</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		time</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">timer</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">	/></span></span>
<span class="line"><span style="color:#81A1C1">	&#x3C;</span><span style="color:#8FBCBB">Line</span></span>
<span class="line"><span style="color:#8FBCBB">		x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">50</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">50</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">Tomato</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 25 0 25 0 25</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		delay</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">0</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		duration</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">3000</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		time</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">timer</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">	/></span></span>
<span class="line"><span style="color:#81A1C1">	&#x3C;</span><span style="color:#8FBCBB">Line</span></span>
<span class="line"><span style="color:#8FBCBB">		x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">30</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">MediumSeaGreen</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 0 50 0 25 50 25</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		delay</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">0</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		duration</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">4000</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		time</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">timer</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">	/></span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/svg></span></span></code></pre>`),Rs(8),w(n,o),X()}export{pa as default,ta as metadata};
