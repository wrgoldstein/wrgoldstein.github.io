import{b as ls,e as us,c as H,a as _,n as Fs,t as As}from"./disclose-version.Rne7Y7Ho.js";import{G as Bs,h as ts,K as ps,I as vs,U as rs,ag as ks,az as gs,ay as ws,Q as _s,ad as xs,ab as bs,M as Ws,aF as Ts,aG as Is,e as qs,u as Ms,E as cs,aH as Ss,q as Ls,ah as M,aI as zs,at as is,o as ys,C as Ns,p as X,f as z,a as $,t as Cs,g as h,y as B,ar as Os,n as Es,ap as Rs,s as p,c as V,r as Z,aq as js}from"./runtime.DIHy09Nm.js";import{e as j,i as G}from"./each.B9j05DSm.js";import{i as Ds}from"./if.DwqOPwtm.js";import{s as m}from"./attributes.CfRrJJIC.js";import{b as Gs}from"./render.DOC5-nbG.js";import{p as S}from"./props.oklhWJcL.js";function L(n,s,a,o,c){var i=n,l="",y;Bs(()=>{if(l===(l=s()??"")){ts&&ps();return}y!==void 0&&(bs(y),y=void 0),l!==""&&(y=vs(()=>{if(ts){rs.data;for(var e=ps(),d=e;e!==null&&(e.nodeType!==8||e.data!=="");)d=e,e=ks(e);if(e===null)throw gs(),ws;ls(rs,d),i=_s(e);return}var E=l+"",F=us(E);ls(xs(F),F.lastChild),i.before(F)}))})}const Ps=requestAnimationFrame,Hs=()=>performance.now(),k={tick:n=>Ps(n),now:()=>Hs(),tasks:new Set};function hs(n){k.tasks.forEach(s=>{s.c(n)||(k.tasks.delete(s),s.f())}),k.tasks.size!==0&&k.tick(hs)}function Us(n){let s;return k.tasks.size===0&&k.tick(hs),{promise:new Promise(a=>{k.tasks.add(s={c:n,f:a})}),abort(){k.tasks.delete(s)}}}function P(n,s){n.dispatchEvent(new CustomEvent(s))}function Ks(n){if(n==="float")return"cssFloat";if(n==="offset")return"cssOffset";if(n.startsWith("--"))return n;const s=n.split("-");return s.length===1?s[0]:s[0]+s.slice(1).map(a=>a[0].toUpperCase()+a.slice(1)).join("")}function ds(n){const s={},a=n.split(";");for(const o of a){const[c,i]=o.split(":");if(!c||i===void 0)break;const l=Ks(c.trim());s[l]=i.trim()}return s}const Ys=n=>n;function Qs(n,s,a,o){var c=(n&zs)!==0,i="both",l,y=s.inert,e,d;function E(){var t=Ns,u=cs;is(null),ys(null);try{return l??(l=a()(s,(o==null?void 0:o())??{},{direction:i}))}finally{is(t),ys(u)}}var F={is_global:c,in(){s.inert=y,P(s,"introstart"),e=J(s,E(),d,1,()=>{P(s,"introend"),e==null||e.abort(),e=l=void 0})},out(t){s.inert=!0,P(s,"outrostart"),d=J(s,E(),e,0,()=>{P(s,"outroend"),t==null||t()})},stop:()=>{e==null||e.abort(),d==null||d.abort()}},C=cs;if((C.transitions??(C.transitions=[])).push(F),Gs){var f=c;if(!f){for(var r=C.parent;r&&r.f&Ws;)for(;(r=r.parent)&&!(r.f&Ts););f=!r||(r.f&Is)!==0}f&&qs(()=>{Ms(()=>F.in())})}}function J(n,s,a,o,c){var i=o===1;if(Ss(s)){var l,y=!1;return Ls(()=>{if(!y){var u=s({direction:i?"in":"out"});l=J(n,u,a,o,c)}}),{abort:()=>{y=!0,l==null||l.abort()},deactivate:()=>l.deactivate(),reset:()=>l.reset(),t:()=>l.t()}}if(a==null||a.deactivate(),!(s!=null&&s.duration))return c(),{abort:M,deactivate:M,reset:M,t:()=>o};const{delay:e=0,css:d,tick:E,easing:F=Ys}=s;var C=[];if(i&&a===void 0&&(E&&E(0,1),d)){var f=ds(d(0,1));C.push(f,f)}var r=()=>1-o,t=n.animate(C,{duration:e});return t.onfinish=()=>{var u=(a==null?void 0:a.t())??1-o;a==null||a.abort();var x=o-u,g=s.duration*Math.abs(x),N=[];if(g>0){if(d)for(var b=Math.ceil(g/16.666666666666668),W=0;W<=b;W+=1){var O=u+x*F(W/b),R=d(O,1-O);N.push(ds(R))}r=()=>{var v=t.currentTime;return u+x*F(v/g)},E&&Us(()=>{if(t.playState!=="running")return!1;var v=r();return E(v,1-v),!0})}t=n.animate(N,{duration:g,fill:"forwards"}),t.onfinish=()=>{r=()=>o,E==null||E(o,1-o),c()}},{abort:()=>{t&&(t.cancel(),t.effect=null,t.onfinish=M)},deactivate:()=>{c=M},reset:()=>{o===0&&(E==null||E(1,0))},t:()=>r()}}const Vs=n=>n;function Zs(n,{delay:s=0,duration:a=400,easing:o=Vs}={}){const c=+getComputedStyle(n).opacity;return{delay:s,duration:a,easing:o,css:i=>`opacity: ${i*c}`}}var Js=Fs('<path stroke-linecap="square"></path>');function D(n,s){X(s,!0);const a=S(s,"draw",3,"regular"),o=S(s,"stroke",3,"white"),c=S(s,"strokeWidth",3,2),i=S(s,"fill",3,"none"),l=S(s,"strokeDasharray",3,"none"),y=1e3;let e=new Array(y).fill().map((r,t)=>2*Math.PI*(t/y)).map(r=>`L${s.cx+s.r*Math.cos(r)} ${s.cy+s.r*Math.sin(r)}`);const d=a()==="reversed";e=d?e.reverse():e,e[0]=e[0].replace("L","M");let E=B(()=>{if(a()=="none")return y;if(s.time<=s.delay||s.time>s.delay+s.duration+s.hold+5)return 0;let r=y*(s.time-s.delay)/s.duration;return d?1-r:r}),F=B(()=>e.slice(0,h(E)).join(" "));var C=H(),f=z(C);Ds(f,()=>s.time>s.delay&&s.time<s.delay+s.duration,r=>{var t=Js();Cs(()=>{m(t,"d",h(F)),m(t,"stroke",o()),m(t,"fill",i()),m(t,"stroke-dasharray",l()),m(t,"stroke-width",c())}),Qs(3,t,()=>Zs),_(r,t)}),_(n,C),$()}function Xs(n,s,a){return n<=s?s:n>=a?a:n}var $s=Fs('<line stroke-linecap="square"></line>');function w(n,s){X(s,!0);let a=B(()=>Xs((s.time-s.delay)/s.duration,0,1)),o=B(()=>s.x0+(s.x2-s.x0)*h(a)),c=B(()=>s.y0+(s.y2-s.y0)*h(a));var i=H(),l=z(i);Ds(l,()=>h(a)>0,y=>{var e=$s();Cs(()=>{m(e,"x1",s.x0),m(e,"y1",s.y0),m(e,"x2",h(o)),m(e,"y2",h(c)),m(e,"stroke",s.stroke),m(e,"stroke-dasharray",s.strokeDashArray),m(e,"stroke-width",s.strokeWidth)}),_(y,e)}),_(n,i),$()}function sa(n){let s,a=Os(void 0);function o(){Es(a,0),requestAnimationFrame(c)}function c(l){s=l,i(l)}function i(l){Es(a,l-s),h(a)<n?requestAnimationFrame(y=>i(y)):o()}return{get time(){return h(a)},start:o}}const ca={layout:"post",title:"Svelte animations",date:"2024-09-27T00:00:00.000Z"};var aa=As('<svg viewbox="0 0 600 100" class="w-full mt-24 mb-12 mx-auto"><path d="M0 50 L 250 50" stroke="#2C5943" stroke-dasharray="0 1 0"></path><path d="M300 50 L 600 50" stroke="#2C5943" stroke-dasharray="0 1 0"></path><!><rect x="100" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><!><!><!><!><!><rect x="250" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><path d="M300 0 L 300 100" stroke="white" stroke-dasharray="0 1 0"></path><path d="M250 50 L 350 50" stroke="white" stroke-dasharray="0 1 0"></path><!><!><!><!><!><rect x="400" y="0" width="100" height="100" rx="15" fill="#2C5943"></rect><!><!><!><!></svg> <p>I build <a href="https://twirldata.com" rel="nofollow">a website recently for work</a>, and as part of that process I got connected to fantastic designer who came up with an awesome vibrant and fun look for the site.</p> <p>One aspect of her vision was to include lots of fun iconographics and animations, and it turned out sheâ€™s skilled at making the required 2D renderings in <a href="https://www.adobe.com/products/aftereffects.html" rel="nofollow">AfterEffects</a>.</p> <p>The animations were really cool, but the exported gifs werenâ€™t always as smooth as I would have liked. We achieved a higher quality of visual by switching from gifs to <a href="https://lottiefiles.com/" rel="nofollow">lotties</a>, but I had an feeling I could do the visuals with svg animated by javascript and it would render silky smooth.</p> <svg viewbox="0 0 500 100" class="my-12 mx-auto">rect> <!><!></svg> <p>The idea is basically to define a svelte <code>$state()</code> variable containing the timing (how far into a loop we are), and then pass that to child components to compute what they should look like based on their own delay, duration, and shape.</p> <p>Hereâ€™s everything I ended up needed for the animation timing (cribbed from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame#examples" rel="nofollow">here</a>).</p> <!> <p>What I like about the example Iâ€™m recreating here is itâ€™s tight timing and sense of rhythm. To achieve that, we just have a Svelte component that receives the <code>time</code> prop from the parent above, and then computes an SVG <code>&lt;path/&gt;</code> that corresponds to the desired effect and timing.</p> <div class="p-4 bg-gray-200"><p>Note the <a href="https://svelte.dev/docs/svelte-transition" rel="nofollow">svelte/transition</a> package has <code>draw</code> in it, which achieves much of the same effect by <a href="https://css-tricks.com/svg-line-animation-works/" rel="nofollow">stroke-dash animation</a>--- but I wanted my lines to retain their stroke dashes, and also to build towards more complicated shapes that canâ€™t be animated with this trick.</p></div> <p>Once you have the timing, Svelte makes the rest really easy.</p> <svg viewbox="0 0 600 100" class="w-full mx-auto"><!><!><!></svg> <p>The main thing is to compute what fraction of the way through the animation we are based on the timing, delay, and duration.</p> <!> <p>We donâ€™t want the fraction to be less than 0 or greater than 1, so we clamp the value to that interval. It would be nice if <code>clamp</code> were <a href="https://stackoverflow.com/questions/11409895/whats-the-most-elegant-way-to-cap-a-number-to-a-segment#comment137766458_39477954" rel="nofollow">part of Math</a>, but since itâ€™s not, weâ€™ll borrow a suggested implementation:</p> <!> <p>and then we just construct an svg element that uses the fraction to interpolate where it should be</p> <!> <p>The colorful lines above are just</p> <!> <p>The circles are the same deal, mostly. We use trigonometry to get some points on a circle, and then figure out what points are visible based on the timing and draw a <code>path</code> element.</p> <p>Iâ€™m not sure whatâ€™s next. It seems like it would be pretty easy to add <a href="https://svelte.dev/docs/svelte-easing" rel="nofollow">easing</a>, but Iâ€™d also like to explore <a href="https://www.youtube.com/watch?v=qlfh_rv6khY" rel="nofollow">procedural animation</a>, or maybe incorporating <a href="https://brm.io/matter-js/" rel="nofollow">physics</a>. Stay tuned.</p> <div class="flex place-content-center">ðŸ”²</div>',1);function ia(n,s){X(s,!0);let a=sa(5500);Rs(()=>{a.start()});var o=aa(),c=z(o),i=p(V(c),2);w(i,{x0:0,x2:100,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"0",duration:250});var l=p(i,2);D(l,{cx:150,cy:50,r:25,get time(){return a.time},delay:"250",duration:"500",hold:"500",draw:"reversed"});var y=p(l);D(y,{cx:150,cy:50,r:35,get time(){return a.time},delay:"750",duration:"500",strokeDasharray:"4 4"});var e=p(y);D(e,{cx:150,cy:50,r:45,get time(){return a.time},delay:"1250",duration:"500",strokeDasharray:"0 4"});var d=p(e);D(d,{cx:150,cy:50,r:25,get time(){return a.time},delay:"1750",duration:"500",hold:"400"});var E=p(d);w(E,{x0:200,x2:250,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"2250",duration:250});var F=p(E,4);D(F,{cx:300,cy:50,r:25,get time(){return a.time},stroke:"none",fill:"white",delay:"2500",duration:"250",hold:"500",draw:"none"});var C=p(F);D(C,{cx:300,cy:50,r:25,get time(){return a.time},delay:"0",duration:"4000",hold:"500",draw:"none"});var f=p(C);D(f,{cx:300,cy:50,r:35,get time(){return a.time},delay:"3000",duration:"500"});var r=p(f);D(r,{cx:300,cy:50,r:45,get time(){return a.time},delay:"3500",duration:"500",strokeDasharray:"0 4"});var t=p(r);w(t,{x0:350,x2:450,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"4000",duration:250});var u=p(t,2);D(u,{cx:450,cy:50,r:25,get time(){return a.time},delay:"0",duration:"4000",hold:"500",draw:"none"});var x=p(u);D(x,{cx:450,cy:50,r:28,get time(){return a.time},delay:"4250",duration:"500",hold:"500",strokeWidth:10});var g=p(x);D(g,{cx:450,cy:50,r:45,get time(){return a.time},delay:"4750",duration:"500",strokeDasharray:"0 4"});var N=p(g);w(N,{x0:500,x2:600,y0:50,y2:50,stroke:"#2C5943",strokeWidth:4,get time(){return a.time},delay:"5250",duration:250}),Z(c);var b=p(c,8),W=p(V(b));j(W,16,()=>[100,200,300,400],G,(U,T)=>{var I=H(),K=z(I);j(K,16,()=>Array(5).fill().map((q,A)=>A*10),G,(q,A)=>{var Y=B(()=>.5*A),Q=B(()=>5*T+5*A);D(q,{get cx(){return T},cy:50,get r(){return h(Y)},get time(){return a.time},stroke:"#2C5943",strokeWidth:1,get delay(){return h(Q)},duration:500,hold:"500",draw:"none"})}),_(U,I)});var O=p(W);j(O,16,()=>[100,200,300,400],G,(U,T)=>{var I=H(),K=z(I);j(K,16,()=>Array(5).fill().map((q,A)=>A*10),G,(q,A)=>{var Y=B(()=>.5*A),Q=B(()=>2e3+5*T+5*A);D(q,{get cx(){return T},cy:50,get r(){return h(Y)},get time(){return a.time},stroke:"#2C5943",strokeWidth:1,get delay(){return h(Q)},duration:500,hold:"500",draw:"none"})}),_(U,I)}),Z(b);var R=p(b,6);L(R,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;script></span></span>
<span class="line"><span style="color:#81A1C1">	import</span><span style="color:#ECEFF4"> &#123;</span><span style="color:#8FBCBB"> onMount</span><span style="color:#ECEFF4"> &#125;</span><span style="color:#81A1C1"> from</span><span style="color:#ECEFF4"> '</span><span style="color:#A3BE8C">svelte</span><span style="color:#ECEFF4">'</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> zero</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> time</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">state</span><span style="color:#D8DEE9FF">()</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	const</span><span style="color:#D8DEE9"> loop_time</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 5_500</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	function</span><span style="color:#88C0D0"> firstFrame</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">		zero</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> timestamp</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#88C0D0">		animate</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	function</span><span style="color:#88C0D0"> animate</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">timestamp</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">		time</span><span style="color:#81A1C1"> =</span><span style="color:#D8DEE9"> timestamp</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> zero</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">		if</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> &#x3C;</span><span style="color:#D8DEE9"> loop_time</span><span style="color:#D8DEE9FF">) </span><span style="color:#ECEFF4">&#123;</span></span>
<span class="line"><span style="color:#88C0D0">			requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">t</span><span style="color:#ECEFF4">)</span><span style="color:#81A1C1"> =></span><span style="color:#88C0D0"> animate</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">t</span><span style="color:#D8DEE9FF">))</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">		&#125;</span><span style="color:#81A1C1"> else</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#D8DEE9">			time</span><span style="color:#81A1C1"> =</span><span style="color:#B48EAD"> 0</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#88C0D0">			setTimeout</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">()</span><span style="color:#81A1C1"> =></span><span style="color:#88C0D0"> requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">firstFrame</span><span style="color:#D8DEE9FF">)</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 100</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">		&#125;</span></span>
<span class="line"><span style="color:#ECEFF4">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0">	onMount</span><span style="color:#D8DEE9FF">(</span><span style="color:#ECEFF4">()</span><span style="color:#81A1C1"> =></span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#88C0D0">		requestAnimationFrame</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">firstFrame</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">	&#125;</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/script></span></span></code></pre>`);var v=p(R,8),ss=V(v);w(ss,{x0:0,x2:600,y0:50,y2:50,stroke:"Tomato",strokeWidth:20,strokeDashArray:"0 25 0 25 0 25",delay:"0",duration:"3000",get time(){return a.time}});var as=p(ss);w(as,{x0:0,x2:600,y0:20,y2:30,stroke:"MediumSeaGreen",strokeWidth:20,strokeDashArray:"0 0 50 0 25 50 25",delay:"0",duration:"4000",get time(){return a.time}});var ms=p(as);w(ms,{x0:0,x2:600,y0:40,y2:10,stroke:"DodgerBlue",strokeWidth:10,strokeDashArray:"0 25 50 0 25 50 25",delay:"3000",duration:"500",get time(){return a.time}}),Z(v);var ns=p(v,4);L(ns,()=>'<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">let</span><span style="color:#D8DEE9"> fraction</span><span style="color:#81A1C1"> =</span><span style="color:#88C0D0"> $derived</span><span style="color:#D8DEE9FF">((</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> delay</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">/</span><span style="color:#D8DEE9"> duration</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span></code></pre>');var es=p(ns,4);L(es,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">function</span><span style="color:#88C0D0"> clamp</span><span style="color:#ECEFF4">(</span><span style="color:#D8DEE9">num</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> min</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> max</span><span style="color:#ECEFF4">)</span><span style="color:#ECEFF4"> &#123;</span></span>
<span class="line"><span style="color:#81A1C1">	return</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1"> &#x3C;=</span><span style="color:#D8DEE9"> min</span><span style="color:#81A1C1"> ?</span><span style="color:#D8DEE9"> min</span><span style="color:#81A1C1"> :</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1"> >=</span><span style="color:#D8DEE9"> max</span><span style="color:#81A1C1"> ?</span><span style="color:#D8DEE9"> max</span><span style="color:#81A1C1"> :</span><span style="color:#D8DEE9"> num</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#ECEFF4">&#125;</span></span></code></pre>`);var os=p(es,4);L(os,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;script></span></span>
<span class="line"><span style="color:#81A1C1">	const</span><span style="color:#ECEFF4"> &#123;</span><span style="color:#D8DEE9"> x1</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> y1</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> xto</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> yto</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> delay</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> duration</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> time</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> stroke</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> strokeWidth</span><span style="color:#ECEFF4">,</span><span style="color:#D8DEE9"> strokeDasharray</span><span style="color:#ECEFF4"> &#125;</span><span style="color:#81A1C1"> =</span></span>
<span class="line"><span style="color:#81A1C1">		$</span><span style="color:#88C0D0">props</span><span style="color:#D8DEE9FF">()</span><span style="color:#81A1C1">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> fraction</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#88C0D0">clamp</span><span style="color:#D8DEE9FF">((</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> delay</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">/</span><span style="color:#D8DEE9"> duration</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 0</span><span style="color:#ECEFF4">,</span><span style="color:#B48EAD"> 1</span><span style="color:#D8DEE9FF">))</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> x2</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">x1</span><span style="color:#81A1C1"> +</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">xto</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> x1</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">*</span><span style="color:#D8DEE9"> fraction</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">	let</span><span style="color:#D8DEE9"> y2</span><span style="color:#81A1C1"> =</span><span style="color:#81A1C1"> $</span><span style="color:#88C0D0">derived</span><span style="color:#D8DEE9FF">(</span><span style="color:#D8DEE9">y1</span><span style="color:#81A1C1"> +</span><span style="color:#D8DEE9FF"> (</span><span style="color:#D8DEE9">yto</span><span style="color:#81A1C1"> -</span><span style="color:#D8DEE9"> y1</span><span style="color:#D8DEE9FF">) </span><span style="color:#81A1C1">*</span><span style="color:#D8DEE9"> fraction</span><span style="color:#D8DEE9FF">)</span><span style="color:#81A1C1">;</span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/script></span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1">&#x3C;line</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">x1</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">y1</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">x2</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">y2</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	&#123;</span><span style="color:#D8DEE9">stroke</span><span style="color:#8FBCBB">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	stroke-dasharray</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">strokeDasharray</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">	stroke-linecap</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">square</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">	stroke-width</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">strokeWidth</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">></span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/line></span></span></code></pre>`);var fs=p(os,4);L(fs,()=>`<pre class="shiki nord" style="background-color:#2e3440ff;color:#d8dee9ff" tabindex="0"><code><span class="line"><span style="color:#81A1C1">&#x3C;svg</span><span style="color:#8FBCBB"> viewbox</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 0 600 100</span><span style="color:#ECEFF4">"</span><span style="color:#8FBCBB"> class</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">w-full mx-auto</span><span style="color:#ECEFF4">"</span><span style="color:#81A1C1">></span></span>
<span class="line"><span style="color:#81A1C1">	&#x3C;</span><span style="color:#8FBCBB">Line</span></span>
<span class="line"><span style="color:#8FBCBB">		x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">40</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">10</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">DodgerBlue</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">10</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 25 50 0 25 50 25</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		delay</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">3000</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		duration</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">500</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		time</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">timer</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">	/></span></span>
<span class="line"><span style="color:#81A1C1">	&#x3C;</span><span style="color:#8FBCBB">Line</span></span>
<span class="line"><span style="color:#8FBCBB">		x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">50</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">50</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">Tomato</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 25 0 25 0 25</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		delay</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">0</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		duration</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">3000</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		time</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">timer</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">	/></span></span>
<span class="line"><span style="color:#81A1C1">	&#x3C;</span><span style="color:#8FBCBB">Line</span></span>
<span class="line"><span style="color:#8FBCBB">		x1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">0</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		xto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">600</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		y1</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		yto</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">30</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		stroke</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">MediumSeaGreen</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeWidth</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#B48EAD">20</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#8FBCBB">		strokeDashArray</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#A3BE8C">0 0 50 0 25 50 25</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		delay</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">0</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		duration</span><span style="color:#ECEFF4">=</span><span style="color:#ECEFF4">"</span><span style="color:#B48EAD">4000</span><span style="color:#ECEFF4">"</span></span>
<span class="line"><span style="color:#8FBCBB">		time</span><span style="color:#ECEFF4">=</span><span style="color:#81A1C1">&#123;</span><span style="color:#D8DEE9">timer</span><span style="color:#ECEFF4">.</span><span style="color:#D8DEE9">time</span><span style="color:#81A1C1">&#125;</span></span>
<span class="line"><span style="color:#81A1C1">	/></span></span>
<span class="line"><span style="color:#81A1C1">&#x3C;/svg></span></span></code></pre>`),js(6),_(n,o),$()}export{ia as default,ca as metadata};
