<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wrgoldstein.github.io</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 Mar 2020 19:53:42 -0400</pubDate>
    <lastBuildDate>Fri, 20 Mar 2020 19:53:42 -0400</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>no-ledge</title>
        <description>&lt;p&gt;I have a new project called &lt;a href=&quot;github.com/wrgoldstein/noledge&quot;&gt;noledge&lt;/a&gt; which is a way of tackling the &lt;a href=&quot;https://medium.com/airbnb-engineering/scaling-knowledge-at-airbnb-875d73eff091&quot;&gt;knowledge sharing&lt;/a&gt; problem. Similar projects include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/knowledge-repo&quot;&gt;knowledge-repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;kyso.io&quot;&gt;kyso.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;github.com/fastai/fastpages&quot;&gt;fastpages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My reasons for making one myself are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;knowledge-repo is no longer actively supported and is a strange developer experience&lt;/li&gt;
  &lt;li&gt;kyso is also kind of a weird developer experience. My project is most similar to it though.&lt;/li&gt;
  &lt;li&gt;fastpages is open and hard to add authentication to, so it’s not a good solution for internal knowledge sharing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/noledge1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automatically convert .ipynb files to attractive html pages with the ability to hide code&lt;/li&gt;
  &lt;li&gt;Automatically read posts from a github repository&lt;/li&gt;
  &lt;li&gt;Search posts by title or author&lt;/li&gt;
  &lt;li&gt;Scan posts by date or through a directory structure&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Mar 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2020/03/16/no_ledge.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/03/16/no_ledge.html</guid>
        
        
      </item>
    
      <item>
        <title>svelte-charts</title>
        <description>&lt;p&gt;In some of my recent projects I’ve been using the very good &lt;a href=&quot;https://www.chartjs.org/&quot;&gt;chart.js&lt;/a&gt; library, but I’ve always wanted to have a little more control over my charts. I planned to implement them in d3.js eventually, but I recently read Paul Sweeney on &lt;a href=&quot;https://medium.com/@PepsRyuu/why-i-no-longer-use-d3-js-b8288f306c9a&quot;&gt;why he doesn’t use d3 anymore&lt;/a&gt; and the &lt;a href=&quot;https://medium.com/@mbostock/why-you-should-use-d3-ae63c276e958&quot;&gt;counterpunch&lt;/a&gt; from Mike Bostock and decided to do exactly as Mike suggests- use d3, but only for the fiddly bits I don’t want to calculate myself (like nice tick marks) and not for DOM selection and mutation.&lt;/p&gt;

&lt;p&gt;A goal is to create a charting element like Tableau or Looker that allows for quite a bit of easy configuring, for example easily toggling from a bar chart to a line chart.&lt;/p&gt;

&lt;p&gt;It’s still very early days, but it felt worth mentioning, especially as I haven’t really blogged about Svelte at all. Svelte is a delight to work with, I’m having a lot of fun with it.&lt;/p&gt;

&lt;p&gt;The code is &lt;a href=&quot;https://github.com/wrgoldstein/svelte-charts/&quot;&gt;here&lt;/a&gt;, and below is a small demo of it in action. (I’m changing the kind of data between time series, categorical, and numerical as well as changing the type of plot between line, stacked bar, etc.):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/svelte-charts-demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jan 2020 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2020/01/16/svelte_charts.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/16/svelte_charts.html</guid>
        
        
      </item>
    
      <item>
        <title>Projects</title>
        <description>&lt;p&gt;This is a stub, but I want a record of the projects I want to pursue in the coming months:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Knowledge repo: Airbnb released one but it’s not good or widely used. Basically, how do you solve the issue of redoing work and not having easy discovery of analysis that lives in emails and google docs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data disovery: Related to knowledge discovery, but how do you know which datasets are actively used/supported? Where do you start if you’re new to an organization and you have a question? This should be baked into the data analysis toolchain and not live separately. A &lt;a href=&quot;https://www.locallyoptimistic.com/post/data_dictionaries/&quot;&gt;data dictionary&lt;/a&gt; is a bad solution to this. A good solution would leverage past usage and a social graph.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data enrichment: This could mean a lot of things, but I’m primarily interested in how you record key moments that affect data analysis and easily join them into your company’s analysis process. Exampls include: outages, major feature launches, big marketing campaigns that change the mix of users: anything that could exogenously explain away anomalies in the data but in most places depends on tribal knowledge and memory to be included.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Looker style data discovery: Looker is excellent (primarily for definition reuse and nontechnical data discovery and exploration) but costs far too much. I’ve developed an alternative, that I might open source or try to sell (ongoing).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reuse of Python / SQL work. If I had a dollar for every time I rewrote a snippet of SQL or Python to answer a question because it was faster than hunting it down in a jupyter notebook I’d have a lot of dollars.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;I took a stab at writing my own python notebook, with the idea that you could individually save and reuse code blocks. If this existed it would greatly speed up my own analysis. Turns out though that the IPython/Jupyter ecosystem is vast and complex, and while my basic notebook implementation works it doesn’t have a lot of the goodies that people take for granted from IPython.&lt;/li&gt;
      &lt;li&gt;I also wrote my own SQL editor with the intention of parsing the SQL abstract syntax tree and generating a network of interrelated tables and relations, but got stuck on finding a high quality AST parser in the javascript/elixir ecosystem. I decided to write my own using Jose Valim’s &lt;a href=&quot;https://github.com/plataformatec/nimble_parsec&quot;&gt;nimble_parsec&lt;/a&gt; but this ended up being really difficult (the 2003 SQL &lt;a href=&quot;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&quot;&gt;bnf&lt;/a&gt; is &lt;a href=&quot;https://ronsavage.github.io/SQL/sql-2003-1.bnf.html&quot;&gt;thousands of lines long&lt;/a&gt;) so that was a bad choice/dead end.
        &lt;ul&gt;
          &lt;li&gt;I really want to pick this up again. I think you could intelligently autocomplete entire join relations, where clauses, etc. and save thousands of keystrokes for a busy analyst.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 03 Jan 2020 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2020/01/03/projects.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/03/projects.html</guid>
        
        
      </item>
    
      <item>
        <title>Donella Meadows and Leverage</title>
        <description>&lt;p&gt;I was reminded today of an article I once read on &lt;a href=&quot;http://donellameadows.org/archives/leverage-points-places-to-intervene-in-a-system/&quot;&gt;places to intervene in a system&lt;/a&gt; by the late great Donella Meadows. I panicked briefly because I wasn’t sure if I could find it, but a little bit of lucky googling got me there. This quick post summarizes how I think that article relates to the kind of work I do.&lt;/p&gt;

&lt;p&gt;In data science or analytics we’re often charged with building models to help calculate answers to questions like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How much should I invest in business W?&lt;/li&gt;
  &lt;li&gt;How many people should we hire for X?&lt;/li&gt;
  &lt;li&gt;Should we build feature Y?&lt;/li&gt;
  &lt;li&gt;How can we encourage users to take action Z?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have always found this mandate to be troubling because I find the returns calculated from incrementally better answers to these questions rarely justify the high cost of infrastructure and personel, especially in startups.&lt;/p&gt;

&lt;p&gt;In Meadows’ article she outlines how complex systems are more responsive to some kinds of interventions than other kinds. She comes up with a list of 12 ways to intervene in reverse order of effectiveness:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Constants, parameters, numbers (such as subsidies, taxes, standards).&lt;/li&gt;
  &lt;li&gt;The sizes of buffers and other stabilizing stocks, relative to their flows.&lt;/li&gt;
  &lt;li&gt;The structure of material stocks and flows (such as transport networks, population age structures).&lt;/li&gt;
  &lt;li&gt;The lengths of delays, relative to the rate of system change.&lt;/li&gt;
  &lt;li&gt;The strength of negative feedback loops, relative to the impacts they are trying to correct against.&lt;/li&gt;
  &lt;li&gt;The gain around driving positive feedback loops.&lt;/li&gt;
  &lt;li&gt;The structure of information flows (who does and does not have access to information).&lt;/li&gt;
  &lt;li&gt;The rules of the system (such as incentives, punishments, constraints).&lt;/li&gt;
  &lt;li&gt;The power to add, change, evolve, or self-organize system structure.&lt;/li&gt;
  &lt;li&gt;The goals of the system.&lt;/li&gt;
  &lt;li&gt;The mindset or paradigm out of which the system — its goals, structure, rules, delays, parameters — arises.&lt;/li&gt;
  &lt;li&gt;The power to transcend paradigms.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Meadows defines &lt;strong&gt;leverage points&lt;/strong&gt; as “places within a complex system (a corporation, an economy, a living body, a city, an ecosystem) where a small shift in one thing can produce big changes in everything.” Producing such a change in a desired direction is the objective of almost any kind of work, but I would argue especially in data science.&lt;/p&gt;

&lt;p&gt;The first two questions that I gave as examples correspond to the least influential ways to change a system: Constants, parameters, and numbers. The third corresponds to #2, sizes of buffers. The fourth is nebulous, but might be thought of relating to #3, the structure of materials.&lt;/p&gt;

&lt;p&gt;I contend that the data team’s highest leverage work is the ability to change the structure of information flows (#7) by democratizing access to data. By improving the quality of information at Artsy and the ability to access it, we generated dramatic change across the organization in how people did their jobs. Hundreds of small decisions each day were made using up to date and reliable data, and the compounding gains from that volume of impact definitively justified the investment in a thoughtful analytics team.&lt;/p&gt;

&lt;p&gt;The structure of information flows is the highest leverage point in a small to medium sized business that doesn’t belong explicitly to the realm of the executive team (although of course some of this is fractal in the sense that incentives and mindsets can be set at multiple levels). The data science or analytics team is uniquely capable of influencing this leverage point, and that is the most important reason for having one.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Oct 2019 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2019/10/24/donella_meadows_leverage.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/24/donella_meadows_leverage.html</guid>
        
        
      </item>
    
      <item>
        <title>Business School</title>
        <description>&lt;p&gt;A micro rundown of everything I learned in business school.&lt;/p&gt;

&lt;h3 id=&quot;first-year&quot;&gt;First year&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Managing groups and teams
    &lt;ul&gt;
      &lt;li&gt;Feeling powerful fundamentally changes the brain, creating a feelings of aggression, competition, and self-interest. Feeling unpowerful creates the opposite: a sense of apathy and community orientation.&lt;/li&gt;
      &lt;li&gt;Tasks are better accomplished by hierarchical groups when the planning group communicates intent early and often.&lt;/li&gt;
      &lt;li&gt;Being influential in a group is distinct from and possibly anticorrelated with being knowledgeable / correct on a topic that group is engaging with.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basics of Accounting
    &lt;ul&gt;
      &lt;li&gt;Useful to practice reading 10Ks. Don’t want to be an accountant.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Probability and Statistics
    &lt;ul&gt;
      &lt;li&gt;Always nice to revisit statistics. I gained some additional comfort with basic topics in probability and with the normal distribution.&lt;/li&gt;
      &lt;li&gt;Learned some Stata, don’t feel like I need to learn more.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Microeconomics
    &lt;ul&gt;
      &lt;li&gt;Really liked, refresher on using calculus to solve basic optimization problems.&lt;/li&gt;
      &lt;li&gt;Most problems can be solved with an intuition of what will happen in equilibrium and some geometry.&lt;/li&gt;
      &lt;li&gt;Got to tutor this subject in second year, which was fun (my students had almost no trouble with the material so it was easy).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Competitor
    &lt;ul&gt;
      &lt;li&gt;I read Michael Porter’s Competitive Stategy in college, and this didn’t build much past that, but did provide some practice thinking through a few situations. In general I’m pretty skeptical on high strategy as a concept; As they say: “Execution eats strategy for breakfast”.&lt;/li&gt;
      &lt;li&gt;Competition classification system was useful and interesting: Cournot competition, Hotelling line, Bertrand. Maybe a bloggy post on these would be good.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Modeling Managerial Decisions
    &lt;ul&gt;
      &lt;li&gt;I was so hopeful for this class, but it covered basic pop psychology you might find in Thinking Fast and Slow or anything by Cass Sunstein, and some pretty basic excel modeling and probability. I did get to learn about linear programming and Solver, which were new to me, so I’m glad to have those in the tool bag.&lt;/li&gt;
      &lt;li&gt;I created an &lt;a href=&quot;https://observablehq.com/@wrgoldstein/domaine-paul-autard/2&quot;&gt;interactive LP problem solver&lt;/a&gt; using Observable (just a side project).&lt;/li&gt;
      &lt;li&gt;Excel’s Solver is &lt;em&gt;excellent&lt;/em&gt;, and actually better than most open source optimizers in python.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Customer
    &lt;ul&gt;
      &lt;li&gt;Basically marketing class. There were a few interesting frameworks, like needs-benefits analysis.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Investor
    &lt;ul&gt;
      &lt;li&gt;I didn’t have much exposure to finance so this class was interesting for me. Bond math, options pricing, discussions of market efficiency. Set the stage for second year finance classes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Power &amp;amp; Politics
    &lt;ul&gt;
      &lt;li&gt;A class ostensibly on learning about interpersonal dynamics and how they play out in a corporate setting, but I struggled to get anything out of this class. I dig in further second year with Interpersonal Dynamics.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sourcing and Managing Funds
    &lt;ul&gt;
      &lt;li&gt;A financial modeling class focused on forecasting out cashflows and finding valuations for companies based on their balance sheet. This is another area where I hoped there was deep insight but found rote calculations instead.&lt;/li&gt;
      &lt;li&gt;Credibly modeling out a business opportunity is a weak area for me and I’d like to find more opportunities to learn and practice. I’m just so skeptical of the point estimates being assigned to these values without concern for variability or measurement error.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Intro to Negotiation
    &lt;ul&gt;
      &lt;li&gt;Negotiation doesn’t have to be a zero sum game! Since participants can value the same inputs differently, an efficient distribution can &lt;em&gt;create&lt;/em&gt; value. The necessity is therefore information sharing in order to find those opportunities.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;International Experience: New Zealand
    &lt;ul&gt;
      &lt;li&gt;I went to New Zealand. It was boss. I mentioned Fonterra before, which was fascinating. I wrote a whole separate post on this.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Global Virtual teams
    &lt;ul&gt;
      &lt;li&gt;There can be challenges working across time zones and teams. Which I think I knew. I got the lowest possible grade in this class without failing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Workforce
    &lt;ul&gt;
      &lt;li&gt;Frustratingly information sparse exploration of human capital problems in the workforce.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Global Macroeconomy
    &lt;ul&gt;
      &lt;li&gt;Fascinating and challenging. Full derivation of the IS-LM macroeconomics model and how to use it to evaluate potential policy changes or exogenous shocks. Really strained my brain’s ability to think in six dimensions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Executive perspective
    &lt;ul&gt;
      &lt;li&gt;Completely checked out of this.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;State &amp;amp; Society
    &lt;ul&gt;
      &lt;li&gt;Really interesting discussion of the intersection of society and business. We covered how business interests can push forward on social problems (e.g. mining executives had a lot to do with ending apartheid in South Africa). Few actionable takeaways but a lot of exposure to different kinds of issues via cases.&lt;/li&gt;
      &lt;li&gt;A K-group is necessary for business to take a stand: a small group of large businesses for whom it is worth solving a problem even though others will freeride on their solution.&lt;/li&gt;
      &lt;li&gt;Talked about democracy, which was fascinating. Need to read Stigler, Peltzman and Pigou.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Causal Inference
    &lt;ul&gt;
      &lt;li&gt;An extensive discussion of omitted variables bias and reverse causation.&lt;/li&gt;
      &lt;li&gt;A few new techniques: regression  discontinuity  designs;  matching estimators; instrumental variables; synthetic    controls; event studies; difference-in-differences;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Financing Green Technologies
    &lt;ul&gt;
      &lt;li&gt;Ponderous exploration of renewable energy policy and how renewable energy project finance works.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Simulation Modeling
    &lt;ul&gt;
      &lt;li&gt;Subject near and dear to my heart, which it was basically impossible to do justice to in the context of an MBA class.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Advanced Negotiations
    &lt;ul&gt;
      &lt;li&gt;Some mathy explorations of how to assign value in a given complex situation (e.g. how to split a cab fare fairly)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;second-year&quot;&gt;Second year&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Interpersonal Dynamics
    &lt;ul&gt;
      &lt;li&gt;What Stanford calls “Touchy Feely”– a very in depth practice based exploration of giving and receiving powerful feedback. Should blog on this, have read a lot on the subject now (most recently “Crucial Conversations”).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Speculation and Hedging in Financial Markets
    &lt;ul&gt;
      &lt;li&gt;How to price derivatives and create hedged positions. Should blog on this so I don’t forget.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Applied Quantitative Finance
    &lt;ul&gt;
      &lt;li&gt;Best class I’ve taken. Ground up exploration of quantitative finance based on a survey of the most important papers. Heavy coding and math. Should blog on this too.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Central Banking
    &lt;ul&gt;
      &lt;li&gt;Slow but interesting discussion of the role central banking plays in the economy taught by a former Federal Reserve Board member. So slow I ended up dropping it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 09 Oct 2019 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2019/10/09/business-school.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/09/business-school.html</guid>
        
        
      </item>
    
      <item>
        <title>Farkle</title>
        <description>&lt;style&gt;
table {
  padding: 0; 
  max-width: 50%;
  margin: auto;
}
th {
    text-align: center;
}
table tr {
    border-top: 1px solid #cccccc;
    background-color: white;
    margin: 0;
    padding: 0; 
}
table tr th {
    font-weight: bold;
    border: 1px solid #cccccc;
    margin: 0;
    padding: 6px 13px; 
}
table tr td {
    border: 1px solid #cccccc;
    text-align: right;
    margin: 0;
    padding: 6px 13px; 
}

.dice {
    font-size: 56px;
    margin-bottom: 28px;
    width: 65%;
    margin-left: auto;
}

.example {
    background-color: #eee;
    border-radius: 15px;
    padding: 15px;
}
&lt;/style&gt;

&lt;p&gt;I played a game recently called &lt;a href=&quot;https://en.wikipedia.org/wiki/Farkle&quot;&gt;Farkle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rules are that you roll six dice and earn a score for certain combinations:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;hand&lt;/th&gt;
      &lt;th&gt;points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;6 of a kind&lt;/td&gt;
      &lt;td&gt;3,000 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5 of a kind&lt;/td&gt;
      &lt;td&gt;2,000 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1-6 straight&lt;/td&gt;
      &lt;td&gt;1,500 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;three pairs&lt;/td&gt;
      &lt;td&gt;1,500 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4 of a kind&lt;/td&gt;
      &lt;td&gt;1,000 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3 of kind&lt;/td&gt;
      &lt;td&gt;100 * pip (so three fives is 500)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a single 1&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a single 5&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
But you must follow these additional rules:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You remove any scored dice from what was rolled, adding the points earned to a running total for the turn.&lt;/li&gt;
  &lt;li&gt;If you cannot score any dice, you earn 0 for the turn regardless of any previous points earned.&lt;/li&gt;
  &lt;li&gt;If your total score is over 500 points you may stop, otherwise you must reroll the unscored dice.&lt;/li&gt;
  &lt;li&gt;If you score all six dice, you may roll all six again to continue adding to your score.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;example&quot;&gt;
    &lt;h3&gt; Example: &lt;/h3&gt;
    If you roll 
    &lt;div class=&quot;dice&quot;&gt;⚅ ⚅ ⚅ ⚀ ⚀&lt;/div&gt;

    You may take 600 points for the three sixes, and two hundred for the two ones. Since you have reached 500 points you may stop rolling, or you may continue with all six dice.

    If the next roll is 

    &lt;div class=&quot;dice&quot;&gt;⚄ ⚁ ⚂ ⚃ ⚃ ⚁&lt;/div&gt;

    You may take 50 points for the 5 for a total of 650. You may stop here, or you may continue. Let's say you roll one more time (rolling only 5 dice since you removed the 5 for 50 points).

    &lt;div class=&quot;dice&quot;&gt;⚁ ⚁ ⚃ ⚃ ⚂&lt;/div&gt;

    Farkle! You receive 0 for this round, and play passes to your left.

&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Clearly, just like in &lt;a href=&quot;http://wrgoldstein.github.io/2016/07/24/hog-dice.html&quot;&gt;Hog Dice&lt;/a&gt;, this is a game about balancing more opportunities to score against the probability of getting a 0. It’s also clearly also solveable.&lt;/p&gt;

&lt;p&gt;I wrote a simulation of the game and examined the scoring outcomes of a few different strategies. Here’s what I learned.&lt;/p&gt;

&lt;p&gt;Consider three strategies for choosing between the following:&lt;/p&gt;

&lt;div class=&quot;dice&quot;&gt;⚂ ⚂ ⚂ ⚀ ⚁ ⚁&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Take three threes and a one for 400 points and reroll two dice.&lt;/li&gt;
  &lt;li&gt;Take only the one for 100 points and reroll five dice.&lt;/li&gt;
  &lt;li&gt;Take three threes for 300 points and reroll three dice.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This boils down to: If you have a choice between taking extra points and rolling extra dice, what should you do?&lt;/p&gt;

&lt;p&gt;Choice (1) is what I call the greedy approach where you take as many points as are available.&lt;/p&gt;

&lt;p&gt;Choice (2) is the gambler approach, where you always try to roll as many dice as possible.&lt;/p&gt;

&lt;p&gt;Choice (3) is what I call the balanced approach, where you try to take a larger point total where it won’t force you to roll too few dice.&lt;/p&gt;

&lt;p&gt;Obviously on any given role, the greedy approach (take all available points) will dominate. On average, this approach is safest and leads to the fewest farkles:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/farkle3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That pattern is also visible here, where we break out the distribution of scores for each strategy given the roll from above:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/farkle4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, you can also see that the other strategies are more likely to score a higher point total in a given turn.&lt;/p&gt;

&lt;p&gt;Does the higher point total balance out the risk you take by rolling more often? It turns out, yes, it comes quite close to catching up to the greedy approach in the long run (this is a game of 100 rolls):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/farkle5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which leaves only one more question: Is the long run soon enough for a game of farkle to 10,000 points? The answer appears to be yes, but that finish line is actually fairly close to the crossover point. There’s also a lot of luck in this game. Here’s the % of games won by the greedy strategy for various thresholds for victory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/farkle6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The gambler approach pays off in the long run, indicating the expected value of that approach is higher, but the risk of additional farkles means it isn’t that much better than the greedy approach. Balanced runs a distant third unless you play a lot of games.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2019/07/29/farkle.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/29/farkle.html</guid>
        
        
      </item>
    
      <item>
        <title>Being careful about hypotheses</title>
        <description>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.min.css&quot; integrity=&quot;sha384-D+9gmBxUQogRLqvARvNLmA9hS2x//eK1FhVb9PiU86gmcrBrJAQT8okdJ4LMp2uv&quot; crossorigin=&quot;anonymous&quot; /&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.min.js&quot; integrity=&quot;sha384-483A6DwYfKeDa0Q52fJmxFXkcPCFfnXMoXblOkJ4JcA8zATN6Tm78UNL72AKk+0O&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;p&gt;We don’t talk enough about careful scientific process when it comes to setting up experiments (in startup land, often, launching a new feature for a web product). In particular, we rarely discuss our prior belief of the likely effectiveness of a given feature in driving a certain behavior.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;https://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.0020124&quot;&gt;a provocatively titled paper by John Ioannidis&lt;/a&gt; claiming the majority of scientific results are actually false. It  hinges on (among other issues) the prior likelihood of a tested hypothesis being true.  I think the math there is instructive to think about.&lt;/p&gt;

&lt;p&gt;If a p-value indicates the probability of seeing a given experimental outcome given a false hypothesis, we can accept only results with a p-value of .05 or less and expect to make mistakes no more than 95% of the time.&lt;/p&gt;

&lt;p&gt;However, when we zoom out and look at many tests like this as a whole, we have to ask ourselves about the overall probability of a given hypothesis being true.  If we say scientists (or product managers!) are only generating/testing correct hypotheses 10% of the time, our p-value means something different. We know from Bayes’ Theorem:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div id=&quot;bayes theorem&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  var formula = &quot;P(false|reject) = \\frac{P(reject|false) \\times P(false)}{P(reject|false) \\times P(false) + P(reject|true) \\times P(true)}&quot;
  katex.render(formula, document.getElementById(&quot;bayes theorem&quot;), {
      displayMode: true,
      throwOnError: false
  });
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;span id=&quot;false given reject&quot;&gt;&lt;/span&gt; is the probability of a false hypothesis given a positive test result (p-value &amp;lt; .05).&lt;/p&gt;

&lt;script&gt;
  var formula =&quot;p( false | reject )&quot;
  katex.render(formula, document.getElementById(&quot;false given reject&quot;), {
      throwOnError: false
  });
&lt;/script&gt;

&lt;p&gt;Since:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span id=&quot;derivation1&quot;&gt;&lt;/span&gt; is the probability of getting a positive result given a false hypothesis (the type I error rate)&lt;/li&gt;
  &lt;li&gt;&lt;span id=&quot;derivation2&quot;&gt;&lt;/span&gt; is the overall probability of a false hypothesis&lt;/li&gt;
  &lt;li&gt;&lt;span id=&quot;derivation3&quot;&gt;&lt;/span&gt; is the overall probability of a true hypothesis (inverse probability of a false hypothesis)&lt;/li&gt;
  &lt;li&gt;&lt;span id=&quot;derivation4&quot;&gt;&lt;/span&gt; is the probability of getting a negative result where there is a real relationship (one minus the &lt;em&gt;power&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
  var derivations = {
      derivation1: `p( false | reject )`,
      derivation2: &quot;p(false)&quot;,
      derivation3: &quot;p(true)&quot;,
      derivation4: &quot;p(reject | true)&quot;
  }

  for (k in derivations){
      katex.render(derivations[k], document.getElementById(k), {
          throwOnError: false
      });
  }
&lt;/script&gt;

&lt;p&gt;And since we often set our type I error rate to .05 and our power to .80, if we claim 10% of theories that get tested are true, we get:&lt;/p&gt;

&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;script&gt;
  var formula = &quot;\\frac{.05 \\times .50}{(.05 \\times .50)+(.20 \\times .50)} \\approx .20&quot;
  katex.render(formula, document.getElementById(&quot;result&quot;), {
      throwOnError: false
  });
&lt;/script&gt;

&lt;p&gt;Which tells us that under the theory that the outside chance of a hypothesis being right is 50%, the probability of a result being false even though the p-value is less than .05 is actually 20%. This is way higher than the type I error rate we claim to test at, and indicates we may make mistakes interpreting the results of about 1 in 5 experiments.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/03/03/careful-hypotheses.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/03/careful-hypotheses.html</guid>
        
        
      </item>
    
      <item>
        <title>Phoenix and RabbitMQ</title>
        <description>&lt;p&gt;Last post I talked about building a high throughput, highly available analytics backend.  I’m not going to do a thorough tutorial here, just identify some steps in getting set up and a few things I learned.&lt;/p&gt;

&lt;h2 id=&quot;getting-set-up&quot;&gt;Getting set up&lt;/h2&gt;

&lt;p&gt;I installed RabbitMQ through &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;, and Phoenix / Elixir from the Phoenix homepage.  Starting the RabbitMQ server was as simple as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/sbin/rabbitmq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and getting a Phoenix app going was easy too (I called my app &lt;code class=&quot;highlighter-rouge&quot;&gt;frequency&lt;/code&gt;; it’s an Artsy tradition to name applications after physics terms):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new frequency --no-brunch --no-ecto --no-html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We just want a pure phoenix API, so we’ll leave out &lt;code class=&quot;highlighter-rouge&quot;&gt;brunch&lt;/code&gt; (the build tool), &lt;code class=&quot;highlighter-rouge&quot;&gt;ecto&lt;/code&gt; (the ActiveRecord equivalent), and all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; support and templating we would need if we wanted our app to have a front-end.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file defines the application’s dependencies as follows (also add these to your &lt;code class=&quot;highlighter-rouge&quot;&gt;applications&lt;/code&gt; method):&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix_pubsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:gettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:amqp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.2.0-pre.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# https://github.com/pma/amqp/issues/28&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:briefly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ex_aws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hackney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;receiving-calls-and-publishing-messages&quot;&gt;Receiving calls and publishing messages&lt;/h2&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;web/router.ex&lt;/code&gt; we add a single &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; route:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Frequency&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pipe_through&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:api&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TracksController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that route we reference the &lt;code class=&quot;highlighter-rouge&quot;&gt;TracksController&lt;/code&gt; which doesn’t exist yet, so under &lt;code class=&quot;highlighter-rouge&quot;&gt;web/controllers&lt;/code&gt; let’s create &lt;code class=&quot;highlighter-rouge&quot;&gt;tracks_controller.ex&lt;/code&gt; with the following body:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TracksController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:controller&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Poison&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’ll see that in turn defers to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Frequency.Worker&lt;/code&gt; that we’ll have to make.  In &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; we’ll make &lt;code class=&quot;highlighter-rouge&quot;&gt;worker.ex&lt;/code&gt; which looks like&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenServer&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;## Client API&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;handling cast.. &quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;## Server Callbacks&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tracks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;channel:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;connection:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tracks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This worker publishes all messages to a RabbitMQ channel:  It defines a single GenServer with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;publisher&lt;/code&gt; which we’ll set up to start under the same &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;supervisor&lt;/a&gt; as our Frequency application (we’ll do this in a minute).  The GenServer exposes a single method, &lt;code class=&quot;highlighter-rouge&quot;&gt;:publish&lt;/code&gt;, which drops the message into a channel defined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;:init&lt;/code&gt; method.  Finally, in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/frequency.ex&lt;/code&gt;, update the children of our process to include our new worker.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;children = [
      # Start the endpoint when the application starts
      supervisor(Frequency.Endpoint, []),
      worker(Frequency.Worker, []),
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Halfway there.&lt;/p&gt;

&lt;h2 id=&quot;receiving-messages-from-rabbitmq-and-posting-them-to-s3&quot;&gt;Receiving messages from RabbitMQ and posting them to S3&lt;/h2&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt;, we’ll create a &lt;code class=&quot;highlighter-rouge&quot;&gt;receiver.ex&lt;/code&gt; which reads messages off the RabbitMQ channel, adds them to a list, and then every 1,000 messages will encode those messages as a JSON file and upload them to S3 using ExAWS (you’ll need to add the variables &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; to your environment).&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Receiver&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_for_messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tracks&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;no_ack:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:batcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_wait_for_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:batcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flush_if_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:batcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:batcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong_rand_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_encode64&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utc_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;batch_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.json&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_and_upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your-bucket&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frequency/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush_if_full&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:batcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Briefly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Poison&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;write_and_upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_wait_for_messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:basic_deliver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;received a message!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_wait_for_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can string it all together with &lt;code class=&quot;highlighter-rouge&quot;&gt;mix phoenix.server&lt;/code&gt; in one terminal window, and &lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt; in another, and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;iex&lt;/code&gt; pane run&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_messages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And all that’s left is hammering our API with &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests, which I elected to do in Ruby:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'net/http'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'127.0.0.1:4000/api/t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'event'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sent_a_message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user_id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xyz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ruby can only spawn so many threads&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sit back and watch your API soak up thousands of concurrent requests without a sweat.&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/02/20/phoenix-rabbitmq.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/20/phoenix-rabbitmq.html</guid>
        
        
      </item>
    
      <item>
        <title>An Analytics Service in Elixir</title>
        <description>&lt;p&gt;Ever since I learned about &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; I’ve been curious about whether it would be feasible to build a service in it for receiving analytics events and pushing them to Redshift like &lt;a href=&quot;http://snowplowanalytics.com/&quot;&gt;Snowplow&lt;/a&gt; or &lt;a href=&quot;https://segment.com/&quot;&gt;Segment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few challenges that a proposed new service would have to solve, alongside the core job of receiving POST requests, writing the passed events to S3, and copying them regularly to Redshift (where they can be analyzed or built upon).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Throughput:&lt;/strong&gt; Analytics on a site like &lt;a href=&quot;artsy.net&quot;&gt;Artsy&lt;/a&gt; aren’t anything like Twitter or Facebook, but we have enough concurrent users on the site– and enough instrumentation – that a proposed API would have to be able to handle a thousands of concurrent events without breaking a sweat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Schemas:&lt;/strong&gt; Analytics events can have different properties that can be difficult to represent in a fixed columnar schema.  Snowplow solved this problem by sticking to a very strict &lt;a href=&quot;http://snowplowanalytics.com/blog/2013/08/12/towards-universal-event-analytics-building-an-event-grammar/&quot;&gt;Subject-Verb-Object&lt;/a&gt; schema.&lt;/p&gt;

&lt;p&gt;Segment handles it by splitting warehoused data into two parts:  a singular, monolithic &lt;code class=&quot;highlighter-rouge&quot;&gt;tracks&lt;/code&gt; table that has only the basic information, and separate &lt;a href=&quot;https://segment.com/docs/warehouses/schema/#event-tables&quot;&gt;event tables&lt;/a&gt; that have a column for each property passed for that specific event.  Developers at Artsy have found that the ability to pass arbitrary JSON payloads makes instrumentation much easier to implement.  I’m on the fence about how much value this really adds, but it is a cool feature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Availability:&lt;/strong&gt; This is tied to throughput but it goes without saying any service would need to have high availability. Events can’t be dropped willy-nilly, or we’d have unreliable data with which to train our models and make our business decisions. Elixir/Erlang’s reputation for availability is a big part of my interest in it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy to deploy:&lt;/strong&gt; A gripe I have with Snowplow is that it is (or was) a series of five applications housed in a single git repository.  It was hard to understand what code did what.  Segment of course is the total opposite:  you pay them to host it for you so it’s plug and play.  This really is the best solution for any company where resources are scant, but I’m curious whether this is something we really need to pay for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Literate code:&lt;/strong&gt; Another Scala gripe, but I find it &lt;em&gt;impossible&lt;/em&gt; to grok. I heard someone joke about how Scala has a philosophy of “write it once, read it never”.  Since I started programming in Ruby I’ve come to strongly believe in simple control flows and obvious naming over code that is tightly optimized (for space or speed). Elixir has some promise of offering both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modularity:&lt;/strong&gt; It is cool how Snowplow offers &lt;a href=&quot;https://github.com/snowplow/snowplow/tree/master/3-enrich&quot;&gt;Enrichment&lt;/a&gt; as a step in their process.  We have many processes in our own ETL flow that do this, for instance transforming referrer urls (for which we use &lt;a href=&quot;https://github.com/snowplow/referer-parser&quot;&gt;a Snowplow library&lt;/a&gt;).  I’d love to just be able to plug in a module as needed to get e.g. geo-ip enrichment, or user-agent parsing.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;The requirements for this are pretty daunting, but I want to play with two ideas for processing events:  using &lt;a href=&quot;https://www.rabbitmq.com/getstarted.html&quot;&gt;RabbitMQ&lt;/a&gt; to queue the events, and using Elixir’s own &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt; (or &lt;a href=&quot;https://github.com/elixir-lang/flow&quot;&gt;Flow?&lt;/a&gt;). In particular I’m curious how they compare in terms of scalability / throughput.  In my next post I’ll describe a very simple RabbitMQ / &lt;a href=&quot;http://www.phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt; setup.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/02/15/analytics-service.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/15/analytics-service.html</guid>
        
        
      </item>
    
      <item>
        <title>Definitions</title>
        <description>&lt;p&gt;Came across the article &lt;a href=&quot;https://medium.freecodecamp.com/habits-of-highly-mathematical-people-b719df12d15e#.th5k031k1&quot;&gt;Habits of Highly Mathematical People&lt;/a&gt; on &lt;a href=&quot;medium.com&quot;&gt;Medium&lt;/a&gt; earlier today.&lt;/p&gt;

&lt;p&gt;Having just created a presentation introducing some concepts of analytical thinking for a nontechnical audience, I immediately thought this would also make an awesome workshop topic.&lt;/p&gt;

&lt;p&gt;Getting end users (e.g. executives or product managers) to nail down exact definitions often seems to be the most important step in doing productive analytics work.&lt;/p&gt;

&lt;p&gt;Maybe for the next offsite.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2016/08/08/definitions.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/08/definitions.html</guid>
        
        
      </item>
    
  </channel>
</rss>
