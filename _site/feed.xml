<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wrgoldstein.github.io</title>
    <description></description>
    <link>http://wrgoldstein.github.io/</link>
    <atom:link href="http://wrgoldstein.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Dec 2015 12:46:46 -0500</pubDate>
    <lastBuildDate>Mon, 28 Dec 2015 12:46:46 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Beam search nearest neighbors</title>
        <description>&lt;p&gt;A common problem is finding the nearest neighbors of a given object in some search space.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Beam_search&quot;&gt;Beam search&lt;/a&gt; is an “anytime” heuristic search algorithm which very efficiently accomplishes this.&lt;/p&gt;

&lt;p&gt;Imagine we have a set of N nodes, each randomly “closest” (connected by an edge) to n other nodes.  The algorithm works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pick a node; paint it red.&lt;/li&gt;
  &lt;li&gt;Paint its neighbors grey. Also paint the neighbors for each of those neighbors.&lt;/li&gt;
  &lt;li&gt;“Fix” the edges of the red node by connecting it to the closest of these grey nodes.&lt;/li&gt;
  &lt;li&gt;Repeat for each node.&lt;/li&gt;
&lt;/ol&gt;

&lt;head&gt;
&lt;style type=&quot;text/css&quot;&gt;
svg {
        box-shadow: 0px 0px 10px #888888;
        margin-top: 5px;
        margin-left: 25%;
        margin-right: 25%;
        width: 50%;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script src=&quot;/js/d3.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var width = 600,
    height = 400,
    n = 50, // number of points
    s = 5,  // number of neighbors per point
    delay = 500, //
    beam_ix = 0, // start with the first node
    neighbor_ixs = undefined,  // or neighbors
    iterations = 3 * n,
    step = 0;

var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
    .attr(&quot;style&quot;, &quot;width=50%&quot;)
    .attr(&quot;height&quot;, height)
    .attr(&quot;id&quot;, &quot;main&quot;);

d3.xml(&quot;/assets/play_button.svg&quot;, &quot;image/svg+xml&quot;, function(error, xml) {
  if (error) throw error;
  svg.node().appendChild(xml.documentElement);
  svg.select(&quot;svg&quot;)
    .attr(&quot;x&quot;, 200)
    .attr(&quot;y&quot;, 100)
    .on(&quot;click&quot;, function(){
      this.remove();
      update_step();
      setTimeout(update_step, 600);
    })
});


var particles = new Array(n);
for (var i = 0; i &lt; n; ++i) {
  particles[i] = {
    x: .1 * width + .9 * width * Math.random(),
    y: .05 * height + .9 * height * Math.random(),
    r: 3 //height * .01 * Math.random()
  };
}

// node and edge selections
var nodes = svg.selectAll(&quot;.dot&quot;)
  .data(particles);

var edges = svg.selectAll(&quot;.edge&quot;)
  .data(particles);


// choose initial neighbors
var choices = d3.range(particles.length);
var neighbors = particles.map(function(el, ix){
  return d3.shuffle(choices).slice(0, s);
})

function initialize(j){
  nodes.enter()
    .append(&quot;circle&quot;)
    .attr(&quot;cx&quot;, function(d){ return d.x; })
    .attr(&quot;cy&quot;, function(d){ return d.y; })
    .attr(&quot;r&quot;, function(d){ return d.r; })

  d3.range(s).forEach(function(_el, j){
    edges.enter().append(&quot;line&quot;)
        .attr(&quot;x1&quot;, function(d, ix){ return d.x })
        .attr(&quot;y1&quot;, function(d, ix){ return d.y })
        .attr(&quot;x2&quot;, function(d, ix){ return lookup(ix, j).x })
        .attr(&quot;y2&quot;, function(d, ix){ return lookup(ix, j).y })
        .attr(&quot;stroke&quot;, &quot;grey&quot;)
        .classed(&#39;edge_&#39; + j, true);
  })
}

function update_neighbors(){
  var first_degree_ixs,
      neighbors_as_particles,
      distances,
      distance_ixs,
      closest;



  beam_ix = (beam_ix &gt;= n - 1) ? 0 : beam_ix + 1;
  step += 1;
  console.log(&quot;step&quot;);
  // grab the neighbors of the node in the beam
  first_degree_ixs = neighbors[beam_ix];
  // grab the neighbors of those neighbors, removing
  // any that might be duplicates or the node itself.
  // (merge flattens an array of arrays)
  neighbor_ixs = uniq_fast(d3.merge(
    first_degree_ixs.map(function(el){
      return neighbors[el] }
    ))
    .concat(first_degree_ixs));

  neighbors_as_particles = neighbor_ixs.map(function(el){ return particles[el] })
  distances = neighbors_as_particles.map(function(p) {
    return euclideanDistance(p, particles[beam_ix])
  });
  distance_ixs = d3.range(distances.length);
  distance_ixs.sort(function(a,b){
    return distances[a] &lt; distances[b] ? 1 : -1 }
  );
  closest = distance_ixs.slice(0, s);
  neighbors[beam_ix] = closest.map(function(i) { return neighbor_ixs[i] })
}

function update(){
  // color nodes
  nodes.transition().duration(delay)
    .attr(&quot;r&quot;, function(d, ix){ return (ix == beam_ix) ? 20 :
        (neighbor_ixs.indexOf(ix) &gt; -1) ? 10 : 3 })
    .attr(&quot;fill&quot;, function(d, ix){ return (ix == beam_ix) ? &quot;red&quot; : &quot;grey&quot; })

  // move edges
  d3.range(s).forEach(function(el, j){
    d3.selectAll(&#39;.edge_&#39; + j).transition().duration(delay)
    .attr(&quot;x2&quot;, function(d, ix){ return lookup(ix, j).x })
    .attr(&quot;y2&quot;, function(d, ix){ return lookup(ix, j).y })
  })
}

function update_step(){
  update_neighbors();
  update();
  if (!(step &gt; iterations)){ setTimeout(update_step, delay); };
}

initialize();


// helpers
function lookup(i, j){
  return particles[neighbors[i][j]]
}

function euclideanDistance(p1, p2) {
  sum_of_squares = 0;
  sum_of_squares += Math.pow(p1.x - p2.x, 2);
  sum_of_squares += Math.pow(p1.y - p2.y, 2);
  return 1.0 / (1 + Math.sqrt(sum_of_squares));
}

function uniq_fast(a) {
    var seen = {};
    var out = [];
    var len = a.length;
    var j = 0;
    for(var i = 0; i &lt; len; i++) {
         var item = a[i];
         if(seen[item] !== 1) {
               seen[item] = 1;
               out[j++] = item;
         }
    }
    return out;
}
&lt;/script&gt;
&lt;/body&gt;
</description>
        <pubDate>Mon, 28 Dec 2015 00:00:00 -0500</pubDate>
        <link>http://wrgoldstein.github.io/2015/12/28/beam_search.html</link>
        <guid isPermaLink="true">http://wrgoldstein.github.io/2015/12/28/beam_search.html</guid>
        
        
      </item>
    
      <item>
        <title>Pipeable data in Ruby</title>
        <description>&lt;p&gt;This post comes from some playing around after seeing Hadley Wickham speak about &lt;a href=&quot;https://speakerdeck.com/hadley/pipelines-for-data-analysis-in-r&quot;&gt;pipeable data in R&lt;/a&gt;.  In it I try to explore different ways of serially applying a set of transformations to a piece of data.&lt;/p&gt;

&lt;p&gt;Say we want to tell a story like the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“the bunny Foofoo went to the forest and ate some grass”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We build up the pieces to tell the story:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;The bunny &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; went to the forest&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and_ate_some_grass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and ate some grass&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then what?  We have some choices.&lt;/p&gt;

&lt;p&gt;Use nested function calls:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and_ate_some_grass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this is hard to read.  What if we broke it out?&lt;/p&gt;

&lt;p&gt;Use separate variables for each state:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;the_named_bunny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;with_subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_named_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and_ate_some_grass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not much better. The variable names are either redundant with the
method names or non descriptive.&lt;/p&gt;

&lt;p&gt;Let’s try using one variable to hold the story as it builds:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and_ate_some_grass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is better, but contrived looking with ‘story’ repeated everywhere. What if we want to tell the same story several times with a different name?  We’d have to copy and paste all three lines.&lt;/p&gt;

&lt;p&gt;So we make a method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tell_the_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and_ate_some_grass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tell_the_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tell_the_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Booboo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which is great, but what if you want the option to just use a piece of your story?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partial_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and_ate_some_grass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;partial_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;full_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Booboo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ugh.  What if there are many possible sub stories?&lt;/p&gt;

&lt;p&gt;Maybe use lambdas with a pipeline:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:the_bunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:went_to_the_forest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:and_ate_some_grass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Booboo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ruby syntax starts getting in the way.  We can at least hide it away:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tell_the_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tell_the_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tell_the_story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storyline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Booboo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this is still sort of all over the place.  We can tidy it up by wrapping it in a class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bunny&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The bunny &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;went_to_the_forest&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; went to the forest&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and_ate_some_grass&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; and ate some grass&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;the_end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@story&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Bunny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_ate_some_grass&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Bunny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Booboo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which is actually pretty great in terms of readability.  But what if there’s another ending, which this class doesn’t know about?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_ending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and then gets eaten by a fox!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;new_ending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bunny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Booboo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;went_to_the_forest&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The nice readability of our story in code is gone, especially if there’s more than one of these building blocks.&lt;/p&gt;

&lt;p&gt;But suppose we skip all this superstructure and use our original methods plus a small glue method in the data class?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voila:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Foofoo&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:the_bunny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:went_to_the_forest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:and_ate_some_grass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This doesn’t allow extra arguments, so if a method like &lt;code&gt;:the&lt;/code&gt; took a parameter like &lt;code&gt;:bunny&lt;/code&gt;, you couldn’t do &lt;code&gt;&#39;Foofoo&#39; | :the, :bunny&lt;/code&gt;.  You could accomplish this with &lt;code&gt;&#39;Foofoo&#39; .| :the, :bunny&lt;/code&gt; (calling the operator directly), but this doesn’t work with the multiline format above.  It’s an open question for me whether Ruby could be made to support this like elixir or clojure.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Dec 2015 00:00:00 -0500</pubDate>
        <link>http://wrgoldstein.github.io/2015/12/27/pipeable_data.html</link>
        <guid isPermaLink="true">http://wrgoldstein.github.io/2015/12/27/pipeable_data.html</guid>
        
        
      </item>
    
      <item>
        <title>K-means</title>
        <description>&lt;script src=&quot;/js/d3.min.js&quot;&gt;&lt;/script&gt;

&lt;head&gt;
    &lt;style&gt;
    .title {
        margin-left: 25%;
        margin-right: 25%;
        font-family: &quot;Lucida Grande&quot;;
        margin-top: 40px;
        color: black;
    }
    svg {
        box-shadow: 0px 0px 10px #888888;
        margin-top: 5px;
        margin-left: 25%;
        margin-right: 25%;
    }
    &lt;/style&gt;
&lt;/head&gt;

&lt;p&gt;This is a visualization of the K-means algorithm with four clusters.&lt;/p&gt;

&lt;script src=&quot;/js/kmeans.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 15 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://wrgoldstein.github.io/2015/09/15/kmeans.html</link>
        <guid isPermaLink="true">http://wrgoldstein.github.io/2015/09/15/kmeans.html</guid>
        
        
      </item>
    
      <item>
        <title>SVG Patterns</title>
        <description>&lt;head&gt;
  &lt;style&gt;
  .title {
  margin-left: 25%;
  margin-right: 25%;
  font-family: &quot;Lucida Grande&quot;;
  margin-top: 40px;
  color: black;
  }
  svg {
  box-shadow: 0px 0px 10px #888888;
  margin-top: 5px;
  /*margin-left: 25%;*/
  width: 100%;
  position: relative;
  }
  input {
  font-family: &quot;Lucida Grande&quot;;
  position: relative;
  margin-left: 40%;
  width: 20%;
  height:50px;
  font-size:14pt;
  text-align: center;
  }
  &lt;/style&gt;
  &lt;script src=&quot;http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha1.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Playing with SVG patterns.  This creates a random pattern from the input text by hashing the text.
  &lt;/p&gt;
  &lt;svg id=&quot;svg&quot; style=&quot;width:100%;height:100%;&quot;&gt;
    &lt;defs id=&quot;defs&quot;&gt;
    &lt;pattern id=&quot;pats&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;20&quot; height=&quot;20&quot; viewbox=&quot;0 0 9 9&quot; patternunits=&quot;userSpaceOnUse&quot;&gt;
      &lt;circle cx=&quot;5&quot; cy=&quot;5&quot; r=&quot;1&quot; fill=&quot;red&quot; /&gt;
    &lt;/pattern&gt;
    &lt;/defs&gt;
    &lt;rect id=&quot;canvas&quot; fill=&quot;url(#pats)&quot; stroke=&quot;black&quot; stroke-width=&quot;5&quot; style=&quot;width:100%;height:100%;&quot; /&gt;
  &lt;/svg&gt;
  &lt;script src=&quot;/js/patterns.js&quot;&gt;&lt;/script&gt;
  &lt;input type=&quot;text&quot; name=&quot;fname&quot; value=&quot;change me&quot; onkeydown=&quot;update(this.value)&quot; onclick=&quot;this.value=&#39;&#39;;&quot; onfocus=&quot;this.select()&quot; /&gt;
&lt;/body&gt;
</description>
        <pubDate>Wed, 15 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://wrgoldstein.github.io/2015/07/15/svg_patterns.html</link>
        <guid isPermaLink="true">http://wrgoldstein.github.io/2015/07/15/svg_patterns.html</guid>
        
        
      </item>
    
  </channel>
</rss>
